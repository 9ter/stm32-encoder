
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005140  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005448  08005448  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005450  08005450  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  080054b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080054b4  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfa4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf4  00000000  00000000  0002d073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002ed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a1  00000000  00000000  0002f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015aef  00000000  00000000  00030351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e39b  00000000  00000000  00045e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c7e0  00000000  00000000  000541db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003980  00000000  00000000  000e09bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000e433c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052c8 	.word	0x080052c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080052c8 	.word	0x080052c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0b2      	sub	sp, #200	; 0xc8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 ffaf 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 fbcf 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 fd21 	bl	8000fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 fcff 	bl	8000f90 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000592:	f000 fcd3 	bl	8000f3c <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8000596:	f000 fca7 	bl	8000ee8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800059a:	f000 fc2f 	bl	8000dfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  int speed_motor = 255;
 800059e:	23ff      	movs	r3, #255	; 0xff
 80005a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  int gap = 10;
 80005a4:	230a      	movs	r3, #10
 80005a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  int point0 =0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  int point1 =36;
 80005b0:	2324      	movs	r3, #36	; 0x24
 80005b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int point2 =72;
 80005b6:	2348      	movs	r3, #72	; 0x48
 80005b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int point3 =108;
 80005bc:	236c      	movs	r3, #108	; 0x6c
 80005be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int point4 =144;
 80005c2:	2390      	movs	r3, #144	; 0x90
 80005c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int point5 =180;
 80005c8:	23b4      	movs	r3, #180	; 0xb4
 80005ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int point6 =216;
 80005ce:	23d8      	movs	r3, #216	; 0xd8
 80005d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int point7 =252;
 80005d4:	23fc      	movs	r3, #252	; 0xfc
 80005d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int point8 =288;
 80005da:	f44f 7390 	mov.w	r3, #288	; 0x120
 80005de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int point9 =324;
 80005e2:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80005e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

int input = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  uint8_t rx_buffer[4];
  uint8_t serial_input[4] = "0";
 80005f0:	2330      	movs	r3, #48	; 0x30
 80005f2:	667b      	str	r3, [r7, #100]	; 0x64
  char bufdata[60];

  char aoaBuffer[10]; // เปลี่ยนเป็นอาร์เรย์ char เพื่อเ�?็บข้อมูล AOA
  char aoaBuffer_data[10];
  char aoaBuffer_data_value[10];
  int aoaIndex = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005fa:	2104      	movs	r1, #4
 80005fc:	48bb      	ldr	r0, [pc, #748]	; (80008ec <main+0x370>)
 80005fe:	f002 fb0f 	bl	8002c20 <HAL_TIM_PWM_Start>
  TIM3->CCR2 = speed_motor;
 8000602:	4abb      	ldr	r2, [pc, #748]	; (80008f0 <main+0x374>)
 8000604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000608:	6393      	str	r3, [r2, #56]	; 0x38

  while (1)
  {

	  HAL_StatusTypeDef status_huart2 = HAL_UART_Receive(&huart2, (uint8_t *)&serial_input, 1, 0);
 800060a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800060e:	2300      	movs	r3, #0
 8000610:	2201      	movs	r2, #1
 8000612:	48b8      	ldr	r0, [pc, #736]	; (80008f4 <main+0x378>)
 8000614:	f003 f95f 	bl	80038d6 <HAL_UART_Receive>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	  if (status_huart2 == HAL_OK || status_huart2 == HAL_TIMEOUT) {
 800061e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <main+0xb2>
 8000626:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800062a:	2b03      	cmp	r3, #3
 800062c:	d1ed      	bne.n	800060a <main+0x8e>
	      // Data received from huart2 or timeout occurred
		  char* string_serial = (char*) &serial_input;
 800062e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000632:	67fb      	str	r3, [r7, #124]	; 0x7c
		  int serial_int = atoi(string_serial);
 8000634:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000636:	f004 f90b 	bl	8004850 <atoi>
 800063a:	67b8      	str	r0, [r7, #120]	; 0x78
		  /*if(serial_int == 1){
			  HAL_UART_Transmit(&huart2, string_serial,sizeof(string_serial), 10);
		  }*/

	      // Attempt to receive data from huart6
	      if (HAL_UART_Receive(&huart6, (uint8_t *)&rx_buffer, 1, 10) == HAL_OK) {
 800063c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000640:	230a      	movs	r3, #10
 8000642:	2201      	movs	r2, #1
 8000644:	48ac      	ldr	r0, [pc, #688]	; (80008f8 <main+0x37c>)
 8000646:	f003 f946 	bl	80038d6 <HAL_UART_Receive>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1dc      	bne.n	800060a <main+0x8e>

	    	  char* string = (char*) &rx_buffer;
 8000650:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000654:	677b      	str	r3, [r7, #116]	; 0x74

	    			if (string[0] == 10)
 8000656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	f040 834e 	bne.w	8000cfc <main+0x780>
	    			{

	    			  int sizebuffer = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	    			 for(int a = 6; a< aoaIndex ; a++){
 8000666:	2306      	movs	r3, #6
 8000668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800066c:	e016      	b.n	800069c <main+0x120>
	    				aoaBuffer_data[a-6] = aoaBuffer[a];
 800066e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000672:	3b06      	subs	r3, #6
 8000674:	f107 011c 	add.w	r1, r7, #28
 8000678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800067c:	440a      	add	r2, r1
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	33c8      	adds	r3, #200	; 0xc8
 8000682:	443b      	add	r3, r7
 8000684:	f803 2cb8 	strb.w	r2, [r3, #-184]
	    				sizebuffer++;
 8000688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800068c:	3301      	adds	r3, #1
 800068e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	    			 for(int a = 6; a< aoaIndex ; a++){
 8000692:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000696:	3301      	adds	r3, #1
 8000698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800069c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80006a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbe2      	blt.n	800066e <main+0xf2>
	    			 }
	    			 aoaBuffer_data[sizebuffer] = '\0';
 80006a8:	f107 0210 	add.w	r2, r7, #16
 80006ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80006b0:	4413      	add	r3, r2
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

	    			 if(sizebuffer == 6){
 80006b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d10e      	bne.n	80006dc <main+0x160>
	    				 aoaBuffer_data_value[0] = '0';
 80006be:	2330      	movs	r3, #48	; 0x30
 80006c0:	713b      	strb	r3, [r7, #4]
	    				 aoaBuffer_data_value[1] = aoaBuffer_data[0];
 80006c2:	7c3b      	ldrb	r3, [r7, #16]
 80006c4:	717b      	strb	r3, [r7, #5]
	    				 aoaBuffer_data_value[2] = aoaBuffer_data[1];
 80006c6:	7c7b      	ldrb	r3, [r7, #17]
 80006c8:	71bb      	strb	r3, [r7, #6]
	    				 aoaBuffer_data_value[3] = aoaBuffer_data[2];
 80006ca:	7cbb      	ldrb	r3, [r7, #18]
 80006cc:	71fb      	strb	r3, [r7, #7]
	    				 aoaBuffer_data_value[4] = aoaBuffer_data[3];
 80006ce:	7cfb      	ldrb	r3, [r7, #19]
 80006d0:	723b      	strb	r3, [r7, #8]
	    				 aoaBuffer_data_value[5] = aoaBuffer_data[4];
 80006d2:	7d3b      	ldrb	r3, [r7, #20]
 80006d4:	727b      	strb	r3, [r7, #9]
	    				 aoaBuffer_data_value[6] = aoaBuffer_data[5];
 80006d6:	7d7b      	ldrb	r3, [r7, #21]
 80006d8:	72bb      	strb	r3, [r7, #10]
 80006da:	e019      	b.n	8000710 <main+0x194>
	    			 }
	    			 else if(sizebuffer == 5){
 80006dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d10e      	bne.n	8000702 <main+0x186>
	    				 aoaBuffer_data_value[0] = '0';
 80006e4:	2330      	movs	r3, #48	; 0x30
 80006e6:	713b      	strb	r3, [r7, #4]
	    				 aoaBuffer_data_value[1] = '0';
 80006e8:	2330      	movs	r3, #48	; 0x30
 80006ea:	717b      	strb	r3, [r7, #5]
	    				 aoaBuffer_data_value[2] = aoaBuffer_data[0];
 80006ec:	7c3b      	ldrb	r3, [r7, #16]
 80006ee:	71bb      	strb	r3, [r7, #6]
	    				 aoaBuffer_data_value[3] = aoaBuffer_data[1];
 80006f0:	7c7b      	ldrb	r3, [r7, #17]
 80006f2:	71fb      	strb	r3, [r7, #7]
	    				 aoaBuffer_data_value[4] = aoaBuffer_data[2];
 80006f4:	7cbb      	ldrb	r3, [r7, #18]
 80006f6:	723b      	strb	r3, [r7, #8]
	    				 aoaBuffer_data_value[5] = aoaBuffer_data[3];
 80006f8:	7cfb      	ldrb	r3, [r7, #19]
 80006fa:	727b      	strb	r3, [r7, #9]
	    				 aoaBuffer_data_value[6] = aoaBuffer_data[4];
 80006fc:	7d3b      	ldrb	r3, [r7, #20]
 80006fe:	72bb      	strb	r3, [r7, #10]
 8000700:	e006      	b.n	8000710 <main+0x194>
	    			 }
	    			 else{
	    				 strcpy(aoaBuffer_data_value,aoaBuffer_data);
 8000702:	f107 0210 	add.w	r2, r7, #16
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f984 	bl	8004a18 <strcpy>
	    			 }


	    			 int DDD = ((aoaBuffer_data_value[0]-48) * 100) + ((aoaBuffer_data_value[1]-48) * 10)+ ((aoaBuffer_data_value[2]-48) * 1);
 8000710:	793b      	ldrb	r3, [r7, #4]
 8000712:	3b30      	subs	r3, #48	; 0x30
 8000714:	2264      	movs	r2, #100	; 0x64
 8000716:	fb02 f103 	mul.w	r1, r2, r3
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	18ca      	adds	r2, r1, r3
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	3b30      	subs	r3, #48	; 0x30
 800072e:	4413      	add	r3, r2
 8000730:	673b      	str	r3, [r7, #112]	; 0x70
	    			 int DDD2 = ((aoaBuffer_data_value[4]-48) * 100) + ((aoaBuffer_data_value[5]-48) * 10)+ ((aoaBuffer_data_value[6]-48) * 1);
 8000732:	7a3b      	ldrb	r3, [r7, #8]
 8000734:	3b30      	subs	r3, #48	; 0x30
 8000736:	2264      	movs	r2, #100	; 0x64
 8000738:	fb02 f103 	mul.w	r1, r2, r3
 800073c:	7a7b      	ldrb	r3, [r7, #9]
 800073e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	18ca      	adds	r2, r1, r3
 800074c:	7abb      	ldrb	r3, [r7, #10]
 800074e:	3b30      	subs	r3, #48	; 0x30
 8000750:	4413      	add	r3, r2
 8000752:	66fb      	str	r3, [r7, #108]	; 0x6c

	    			  aoaIndex = 0; // เริ่มต้นตัวชี้อาร์เรย์ใหม่
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	    			  //sprintf(bufterkak, "size = %d : data = %s : value = %.2f \n", sizebuffer,aoaBuffer_data_value,AOA );
	    			  sprintf(bufdata, "data = : %d:%d \n",DDD,speed_motor );
 800075a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800075e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000762:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000764:	4965      	ldr	r1, [pc, #404]	; (80008fc <main+0x380>)
 8000766:	f004 f903 	bl	8004970 <siprintf>
	    			 HAL_UART_Transmit(&huart2, bufdata,sizeof(bufdata), 10);
 800076a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800076e:	230a      	movs	r3, #10
 8000770:	223c      	movs	r2, #60	; 0x3c
 8000772:	4860      	ldr	r0, [pc, #384]	; (80008f4 <main+0x378>)
 8000774:	f003 f824 	bl	80037c0 <HAL_UART_Transmit>
	    			  //HAL_UART_Transmit(&huart2, aoaBuffer_data,sizeof(aoaBuffer_data), 10);

	    			  if(serial_int == 0){
 8000778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800077a:	2b00      	cmp	r3, #0
 800077c:	d12c      	bne.n	80007d8 <main+0x25c>
	    				  if(DDD > point0 && DDD < point0+gap){
 800077e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000784:	429a      	cmp	r2, r3
 8000786:	dd14      	ble.n	80007b2 <main+0x236>
 8000788:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800078c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000790:	4413      	add	r3, r2
 8000792:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000794:	429a      	cmp	r2, r3
 8000796:	da0c      	bge.n	80007b2 <main+0x236>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	4858      	ldr	r0, [pc, #352]	; (8000900 <main+0x384>)
 80007a0:	f001 fd24 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007aa:	4856      	ldr	r0, [pc, #344]	; (8000904 <main+0x388>)
 80007ac:	f001 fd1e 	bl	80021ec <HAL_GPIO_WritePin>
 80007b0:	e28f      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point0){
 80007b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80007b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f340 828a 	ble.w	8000cd2 <main+0x756>
	    					   HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c4:	484e      	ldr	r0, [pc, #312]	; (8000900 <main+0x384>)
 80007c6:	f001 fd11 	bl	80021ec <HAL_GPIO_WritePin>
    					       HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d0:	484c      	ldr	r0, [pc, #304]	; (8000904 <main+0x388>)
 80007d2:	f001 fd0b 	bl	80021ec <HAL_GPIO_WritePin>
 80007d6:	e27c      	b.n	8000cd2 <main+0x756>
	    				  }
	    			  }
	    			  else if(serial_int == 1){
 80007d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d141      	bne.n	8000862 <main+0x2e6>
	    				  if(DDD > point1-gap && DDD < point1+gap){
 80007de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80007e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dd14      	ble.n	8000818 <main+0x29c>
 80007ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80007f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007f6:	4413      	add	r3, r2
 80007f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80007fa:	429a      	cmp	r2, r3
 80007fc:	da0c      	bge.n	8000818 <main+0x29c>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000804:	483e      	ldr	r0, [pc, #248]	; (8000900 <main+0x384>)
 8000806:	f001 fcf1 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000810:	483c      	ldr	r0, [pc, #240]	; (8000904 <main+0x388>)
 8000812:	f001 fceb 	bl	80021ec <HAL_GPIO_WritePin>
 8000816:	e25c      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point1){
 8000818:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800081a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800081e:	429a      	cmp	r2, r3
 8000820:	dd0c      	ble.n	800083c <main+0x2c0>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000828:	4835      	ldr	r0, [pc, #212]	; (8000900 <main+0x384>)
 800082a:	f001 fcdf 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000834:	4833      	ldr	r0, [pc, #204]	; (8000904 <main+0x388>)
 8000836:	f001 fcd9 	bl	80021ec <HAL_GPIO_WritePin>
 800083a:	e24a      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point1){
 800083c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800083e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000842:	429a      	cmp	r2, r3
 8000844:	f280 8245 	bge.w	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	482c      	ldr	r0, [pc, #176]	; (8000900 <main+0x384>)
 8000850:	f001 fccc 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085a:	482a      	ldr	r0, [pc, #168]	; (8000904 <main+0x388>)
 800085c:	f001 fcc6 	bl	80021ec <HAL_GPIO_WritePin>
 8000860:	e237      	b.n	8000cd2 <main+0x756>
	    				  }

	    			  }
	    			  else if(serial_int == 2){
 8000862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000864:	2b02      	cmp	r3, #2
 8000866:	d14f      	bne.n	8000908 <main+0x38c>
	    				  if(DDD > point2-gap && DDD < point2+gap){
 8000868:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800086c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000874:	429a      	cmp	r2, r3
 8000876:	dd14      	ble.n	80008a2 <main+0x326>
 8000878:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800087c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000880:	4413      	add	r3, r2
 8000882:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000884:	429a      	cmp	r2, r3
 8000886:	da0c      	bge.n	80008a2 <main+0x326>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <main+0x384>)
 8000890:	f001 fcac 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	481a      	ldr	r0, [pc, #104]	; (8000904 <main+0x388>)
 800089c:	f001 fca6 	bl	80021ec <HAL_GPIO_WritePin>
 80008a0:	e217      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point2){
 80008a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80008a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dd0c      	ble.n	80008c6 <main+0x34a>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <main+0x384>)
 80008b4:	f001 fc9a 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <main+0x388>)
 80008c0:	f001 fc94 	bl	80021ec <HAL_GPIO_WritePin>
 80008c4:	e205      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point2){
 80008c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80008c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f280 8200 	bge.w	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <main+0x384>)
 80008da:	f001 fc87 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <main+0x388>)
 80008e6:	f001 fc81 	bl	80021ec <HAL_GPIO_WritePin>
 80008ea:	e1f2      	b.n	8000cd2 <main+0x756>
 80008ec:	20000078 	.word	0x20000078
 80008f0:	40000400 	.word	0x40000400
 80008f4:	200000c0 	.word	0x200000c0
 80008f8:	20000108 	.word	0x20000108
 80008fc:	080052e0 	.word	0x080052e0
 8000900:	40020000 	.word	0x40020000
 8000904:	40020400 	.word	0x40020400
	    				  }
	    			  }
	    			  else if(serial_int == 3){
 8000908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800090a:	2b03      	cmp	r3, #3
 800090c:	d141      	bne.n	8000992 <main+0x416>
	    				  if(DDD > point3-gap && DDD < point3+gap){
 800090e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000912:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800091a:	429a      	cmp	r2, r3
 800091c:	dd14      	ble.n	8000948 <main+0x3cc>
 800091e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000922:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000926:	4413      	add	r3, r2
 8000928:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800092a:	429a      	cmp	r2, r3
 800092c:	da0c      	bge.n	8000948 <main+0x3cc>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	48ba      	ldr	r0, [pc, #744]	; (8000c20 <main+0x6a4>)
 8000936:	f001 fc59 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	48b8      	ldr	r0, [pc, #736]	; (8000c24 <main+0x6a8>)
 8000942:	f001 fc53 	bl	80021ec <HAL_GPIO_WritePin>
 8000946:	e1c4      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point3){
 8000948:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800094a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800094e:	429a      	cmp	r2, r3
 8000950:	dd0c      	ble.n	800096c <main+0x3f0>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000958:	48b1      	ldr	r0, [pc, #708]	; (8000c20 <main+0x6a4>)
 800095a:	f001 fc47 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	48af      	ldr	r0, [pc, #700]	; (8000c24 <main+0x6a8>)
 8000966:	f001 fc41 	bl	80021ec <HAL_GPIO_WritePin>
 800096a:	e1b2      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point3){
 800096c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800096e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000972:	429a      	cmp	r2, r3
 8000974:	f280 81ad 	bge.w	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	48a8      	ldr	r0, [pc, #672]	; (8000c20 <main+0x6a4>)
 8000980:	f001 fc34 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	48a6      	ldr	r0, [pc, #664]	; (8000c24 <main+0x6a8>)
 800098c:	f001 fc2e 	bl	80021ec <HAL_GPIO_WritePin>
 8000990:	e19f      	b.n	8000cd2 <main+0x756>
	    				  }
	    			  }
	    			  else if(serial_int == 4){
 8000992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000994:	2b04      	cmp	r3, #4
 8000996:	d141      	bne.n	8000a1c <main+0x4a0>
	    				  if(DDD > point4-gap && DDD < point4+gap){
 8000998:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800099c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dd14      	ble.n	80009d2 <main+0x456>
 80009a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80009ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80009b0:	4413      	add	r3, r2
 80009b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80009b4:	429a      	cmp	r2, r3
 80009b6:	da0c      	bge.n	80009d2 <main+0x456>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009be:	4898      	ldr	r0, [pc, #608]	; (8000c20 <main+0x6a4>)
 80009c0:	f001 fc14 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ca:	4896      	ldr	r0, [pc, #600]	; (8000c24 <main+0x6a8>)
 80009cc:	f001 fc0e 	bl	80021ec <HAL_GPIO_WritePin>
 80009d0:	e17f      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point4){
 80009d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80009d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009d8:	429a      	cmp	r2, r3
 80009da:	dd0c      	ble.n	80009f6 <main+0x47a>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	488f      	ldr	r0, [pc, #572]	; (8000c20 <main+0x6a4>)
 80009e4:	f001 fc02 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ee:	488d      	ldr	r0, [pc, #564]	; (8000c24 <main+0x6a8>)
 80009f0:	f001 fbfc 	bl	80021ec <HAL_GPIO_WritePin>
 80009f4:	e16d      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point4){
 80009f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80009f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009fc:	429a      	cmp	r2, r3
 80009fe:	f280 8168 	bge.w	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a08:	4885      	ldr	r0, [pc, #532]	; (8000c20 <main+0x6a4>)
 8000a0a:	f001 fbef 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a14:	4883      	ldr	r0, [pc, #524]	; (8000c24 <main+0x6a8>)
 8000a16:	f001 fbe9 	bl	80021ec <HAL_GPIO_WritePin>
 8000a1a:	e15a      	b.n	8000cd2 <main+0x756>
	    				  }
	    			  }
	    			  else if(serial_int == 5){
 8000a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d141      	bne.n	8000aa6 <main+0x52a>
	    				  if(DDD > point5-gap && DDD < point5+gap){
 8000a22:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000a26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dd14      	ble.n	8000a5c <main+0x4e0>
 8000a32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a3a:	4413      	add	r3, r2
 8000a3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	da0c      	bge.n	8000a5c <main+0x4e0>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a48:	4875      	ldr	r0, [pc, #468]	; (8000c20 <main+0x6a4>)
 8000a4a:	f001 fbcf 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	4873      	ldr	r0, [pc, #460]	; (8000c24 <main+0x6a8>)
 8000a56:	f001 fbc9 	bl	80021ec <HAL_GPIO_WritePin>
 8000a5a:	e13a      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point5){
 8000a5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a62:	429a      	cmp	r2, r3
 8000a64:	dd0c      	ble.n	8000a80 <main+0x504>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6c:	486c      	ldr	r0, [pc, #432]	; (8000c20 <main+0x6a4>)
 8000a6e:	f001 fbbd 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a78:	486a      	ldr	r0, [pc, #424]	; (8000c24 <main+0x6a8>)
 8000a7a:	f001 fbb7 	bl	80021ec <HAL_GPIO_WritePin>
 8000a7e:	e128      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point5){
 8000a80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a86:	429a      	cmp	r2, r3
 8000a88:	f280 8123 	bge.w	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	4863      	ldr	r0, [pc, #396]	; (8000c20 <main+0x6a4>)
 8000a94:	f001 fbaa 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	4861      	ldr	r0, [pc, #388]	; (8000c24 <main+0x6a8>)
 8000aa0:	f001 fba4 	bl	80021ec <HAL_GPIO_WritePin>
 8000aa4:	e115      	b.n	8000cd2 <main+0x756>
	    				  }
	    			  }
	    			  else if(serial_int == 6){
 8000aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000aa8:	2b06      	cmp	r3, #6
 8000aaa:	d141      	bne.n	8000b30 <main+0x5b4>
	    				  if(DDD > point6-gap && DDD < point6+gap){
 8000aac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ab0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dd14      	ble.n	8000ae6 <main+0x56a>
 8000abc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ac4:	4413      	add	r3, r2
 8000ac6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	da0c      	bge.n	8000ae6 <main+0x56a>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	4853      	ldr	r0, [pc, #332]	; (8000c20 <main+0x6a4>)
 8000ad4:	f001 fb8a 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	4851      	ldr	r0, [pc, #324]	; (8000c24 <main+0x6a8>)
 8000ae0:	f001 fb84 	bl	80021ec <HAL_GPIO_WritePin>
 8000ae4:	e0f5      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point6){
 8000ae6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dd0c      	ble.n	8000b0a <main+0x58e>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af6:	484a      	ldr	r0, [pc, #296]	; (8000c20 <main+0x6a4>)
 8000af8:	f001 fb78 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b02:	4848      	ldr	r0, [pc, #288]	; (8000c24 <main+0x6a8>)
 8000b04:	f001 fb72 	bl	80021ec <HAL_GPIO_WritePin>
 8000b08:	e0e3      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point6){
 8000b0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f280 80de 	bge.w	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1c:	4840      	ldr	r0, [pc, #256]	; (8000c20 <main+0x6a4>)
 8000b1e:	f001 fb65 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	483e      	ldr	r0, [pc, #248]	; (8000c24 <main+0x6a8>)
 8000b2a:	f001 fb5f 	bl	80021ec <HAL_GPIO_WritePin>
 8000b2e:	e0d0      	b.n	8000cd2 <main+0x756>
	    				  }
	    			  }
	    			  else if(serial_int == 7){
 8000b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d141      	bne.n	8000bba <main+0x63e>
	    				  if(DDD > point7-gap && DDD < point7+gap){
 8000b36:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000b3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dd14      	ble.n	8000b70 <main+0x5f4>
 8000b46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b4e:	4413      	add	r3, r2
 8000b50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b52:	429a      	cmp	r2, r3
 8000b54:	da0c      	bge.n	8000b70 <main+0x5f4>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	4830      	ldr	r0, [pc, #192]	; (8000c20 <main+0x6a4>)
 8000b5e:	f001 fb45 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b68:	482e      	ldr	r0, [pc, #184]	; (8000c24 <main+0x6a8>)
 8000b6a:	f001 fb3f 	bl	80021ec <HAL_GPIO_WritePin>
 8000b6e:	e0b0      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point7){
 8000b70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dd0c      	ble.n	8000b94 <main+0x618>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <main+0x6a4>)
 8000b82:	f001 fb33 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8c:	4825      	ldr	r0, [pc, #148]	; (8000c24 <main+0x6a8>)
 8000b8e:	f001 fb2d 	bl	80021ec <HAL_GPIO_WritePin>
 8000b92:	e09e      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point7){
 8000b94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f280 8099 	bge.w	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	481e      	ldr	r0, [pc, #120]	; (8000c20 <main+0x6a4>)
 8000ba8:	f001 fb20 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb2:	481c      	ldr	r0, [pc, #112]	; (8000c24 <main+0x6a8>)
 8000bb4:	f001 fb1a 	bl	80021ec <HAL_GPIO_WritePin>
 8000bb8:	e08b      	b.n	8000cd2 <main+0x756>
	    				  }
	    			  }
	    			  else if(serial_int == 8){
 8000bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d145      	bne.n	8000c4c <main+0x6d0>
	    				  if(DDD > point8-gap && DDD < point8+gap){
 8000bc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dd14      	ble.n	8000bfa <main+0x67e>
 8000bd0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000bd8:	4413      	add	r3, r2
 8000bda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	da0c      	bge.n	8000bfa <main+0x67e>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <main+0x6a4>)
 8000be8:	f001 fb00 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <main+0x6a8>)
 8000bf4:	f001 fafa 	bl	80021ec <HAL_GPIO_WritePin>
 8000bf8:	e06b      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point8){
 8000bfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dd11      	ble.n	8000c28 <main+0x6ac>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <main+0x6a4>)
 8000c0c:	f001 faee 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <main+0x6a8>)
 8000c18:	f001 fae8 	bl	80021ec <HAL_GPIO_WritePin>
 8000c1c:	e059      	b.n	8000cd2 <main+0x756>
 8000c1e:	bf00      	nop
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
	    				  }else if (DDD < point8){
 8000c28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	da4f      	bge.n	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c38:	4839      	ldr	r0, [pc, #228]	; (8000d20 <main+0x7a4>)
 8000c3a:	f001 fad7 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	4837      	ldr	r0, [pc, #220]	; (8000d24 <main+0x7a8>)
 8000c46:	f001 fad1 	bl	80021ec <HAL_GPIO_WritePin>
 8000c4a:	e042      	b.n	8000cd2 <main+0x756>
	    				  }
	    			  }
	    			  else if(serial_int == 9){
 8000c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	d13f      	bne.n	8000cd2 <main+0x756>
	    				  if(DDD > point9-gap && DDD < point9+gap){
 8000c52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000c56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dd14      	ble.n	8000c8c <main+0x710>
 8000c62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000c66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000c6a:	4413      	add	r3, r2
 8000c6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	da0c      	bge.n	8000c8c <main+0x710>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	4829      	ldr	r0, [pc, #164]	; (8000d20 <main+0x7a4>)
 8000c7a:	f001 fab7 	bl	80021ec <HAL_GPIO_WritePin>
	    					  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4827      	ldr	r0, [pc, #156]	; (8000d24 <main+0x7a8>)
 8000c86:	f001 fab1 	bl	80021ec <HAL_GPIO_WritePin>
 8000c8a:	e022      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD > point9){
 8000c8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c92:	429a      	cmp	r2, r3
 8000c94:	dd0c      	ble.n	8000cb0 <main+0x734>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	4820      	ldr	r0, [pc, #128]	; (8000d20 <main+0x7a4>)
 8000c9e:	f001 faa5 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	481e      	ldr	r0, [pc, #120]	; (8000d24 <main+0x7a8>)
 8000caa:	f001 fa9f 	bl	80021ec <HAL_GPIO_WritePin>
 8000cae:	e010      	b.n	8000cd2 <main+0x756>
	    				  }else if (DDD < point9){
 8000cb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	da0b      	bge.n	8000cd2 <main+0x756>
	    					  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <main+0x7a4>)
 8000cc2:	f001 fa93 	bl	80021ec <HAL_GPIO_WritePin>
    					      HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	4815      	ldr	r0, [pc, #84]	; (8000d24 <main+0x7a8>)
 8000cce:	f001 fa8d 	bl	80021ec <HAL_GPIO_WritePin>





	    			  for(int b = 0; b< sizeof(aoaBuffer_data) ; b++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000cd8:	e00b      	b.n	8000cf2 <main+0x776>
	    				  aoaBuffer_data[b] = 0;
 8000cda:	f107 0210 	add.w	r2, r7, #16
 8000cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ce2:	4413      	add	r3, r2
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	    			  for(int b = 0; b< sizeof(aoaBuffer_data) ; b++){
 8000ce8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000cec:	3301      	adds	r3, #1
 8000cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	d9ef      	bls.n	8000cda <main+0x75e>
 8000cfa:	e486      	b.n	800060a <main+0x8e>
	    			  }
	    			}
	    			else if(string[0] == 13){
 8000cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b0d      	cmp	r3, #13
 8000d02:	f43f ac82 	beq.w	800060a <main+0x8e>

	    			}
	    			else{
	    				aoaBuffer[aoaIndex++] = string[0];
 8000d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000d10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	33c8      	adds	r3, #200	; 0xc8
 8000d16:	443b      	add	r3, r7
 8000d18:	f803 2cac 	strb.w	r2, [r3, #-172]
  {
 8000d1c:	e475      	b.n	800060a <main+0x8e>
 8000d1e:	bf00      	nop
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020400 	.word	0x40020400

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	2230      	movs	r2, #48	; 0x30
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fe3a 	bl	80049b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <SystemClock_Config+0xcc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <SystemClock_Config+0xcc>)
 8000d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <SystemClock_Config+0xd0>)
 8000d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d90:	2302      	movs	r3, #2
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000da2:	2304      	movs	r3, #4
 8000da4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fa36 	bl	8002220 <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dba:	f000 f98d 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fc98 	bl	8002710 <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000de6:	f000 f977 	bl	80010d8 <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3750      	adds	r7, #80	; 0x50
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000

08000dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]
 8000e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ee4 <MX_TIM3_Init+0xe8>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e34:	2254      	movs	r2, #84	; 0x54
 8000e36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e50:	4823      	ldr	r0, [pc, #140]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e52:	f001 fe3d 	bl	8002ad0 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e5c:	f000 f93c 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e6e:	f002 f849 	bl	8002f04 <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e78:	f000 f92e 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e7c:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e7e:	f001 fe76 	bl	8002b6e <HAL_TIM_PWM_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e88:	f000 f926 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000e9c:	f002 fbd2 	bl	8003644 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000ea6:	f000 f917 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eaa:	2360      	movs	r3, #96	; 0x60
 8000eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000ec2:	f001 ff5d 	bl	8002d80 <HAL_TIM_PWM_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ecc:	f000 f904 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM3_Init+0xe4>)
 8000ed2:	f000 f951 	bl	8001178 <HAL_TIM_MspPostInit>

}
 8000ed6:	bf00      	nop
 8000ed8:	3738      	adds	r7, #56	; 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000078 	.word	0x20000078
 8000ee4:	40000400 	.word	0x40000400

08000ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <MX_USART2_UART_Init+0x50>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f20:	f002 fbfe 	bl	8003720 <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2a:	f000 f8d5 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000c0 	.word	0x200000c0
 8000f38:	40004400 	.word	0x40004400

08000f3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART6_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART6_UART_Init+0x4c>)
 8000f74:	f002 fbd4 	bl	8003720 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f000 f8ab 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000108 	.word	0x20000108
 8000f8c:	40011400 	.word	0x40011400

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <MX_DMA_Init+0x3c>)
 8000fa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_DMA_Init+0x3c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2039      	movs	r0, #57	; 0x39
 8000fb8:	f000 fbe1 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fbc:	2039      	movs	r0, #57	; 0x39
 8000fbe:	f000 fbfa 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_GPIO_Init+0xfc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a37      	ldr	r2, [pc, #220]	; (80010cc <MX_GPIO_Init+0xfc>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_GPIO_Init+0xfc>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b31      	ldr	r3, [pc, #196]	; (80010cc <MX_GPIO_Init+0xfc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a30      	ldr	r2, [pc, #192]	; (80010cc <MX_GPIO_Init+0xfc>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <MX_GPIO_Init+0xfc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <MX_GPIO_Init+0xfc>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a29      	ldr	r2, [pc, #164]	; (80010cc <MX_GPIO_Init+0xfc>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <MX_GPIO_Init+0xfc>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <MX_GPIO_Init+0xfc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <MX_GPIO_Init+0xfc>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <MX_GPIO_Init+0xfc>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mr2_GPIO_Port, mr2_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	481c      	ldr	r0, [pc, #112]	; (80010d0 <MX_GPIO_Init+0x100>)
 800105e:	f001 f8c5 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mr1_GPIO_Port, mr1_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001068:	481a      	ldr	r0, [pc, #104]	; (80010d4 <MX_GPIO_Init+0x104>)
 800106a:	f001 f8bf 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : mr2_Pin */
  GPIO_InitStruct.Pin = mr2_Pin;
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mr2_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4812      	ldr	r0, [pc, #72]	; (80010d0 <MX_GPIO_Init+0x100>)
 8001088:	f000 ff2c 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : mr1_Pin */
  GPIO_InitStruct.Pin = mr1_Pin;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mr1_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <MX_GPIO_Init+0x104>)
 80010a6:	f000 ff1d 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ir_Pin */
  GPIO_InitStruct.Pin = ir_Pin;
 80010aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ir_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_GPIO_Init+0x104>)
 80010c0:	f000 ff10 	bl	8001ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020000 	.word	0x40020000

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_MspInit+0x4c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_TIM_Base_MspInit+0x3c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d10d      	bne.n	8001162 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_TIM_Base_MspInit+0x40>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_TIM_Base_MspInit+0x40>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_TIM_Base_MspInit+0x40>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40000400 	.word	0x40000400
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_TIM_MspPostInit+0x68>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d11d      	bne.n	80011d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_TIM_MspPostInit+0x70>)
 80011d2:	f000 fe87 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40000400 	.word	0x40000400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_UART_MspInit+0x168>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d134      	bne.n	8001278 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_UART_MspInit+0x16c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_UART_MspInit+0x16c>)
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <HAL_UART_MspInit+0x16c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_UART_MspInit+0x16c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a49      	ldr	r2, [pc, #292]	; (8001358 <HAL_UART_MspInit+0x16c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_UART_MspInit+0x16c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001246:	230c      	movs	r3, #12
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001256:	2307      	movs	r3, #7
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	483e      	ldr	r0, [pc, #248]	; (800135c <HAL_UART_MspInit+0x170>)
 8001262:	f000 fe3f 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2026      	movs	r0, #38	; 0x26
 800126c:	f000 fa87 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001270:	2026      	movs	r0, #38	; 0x26
 8001272:	f000 faa0 	bl	80017b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001276:	e069      	b.n	800134c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART6)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a38      	ldr	r2, [pc, #224]	; (8001360 <HAL_UART_MspInit+0x174>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d164      	bne.n	800134c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_UART_MspInit+0x16c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a33      	ldr	r2, [pc, #204]	; (8001358 <HAL_UART_MspInit+0x16c>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_UART_MspInit+0x16c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_UART_MspInit+0x16c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <HAL_UART_MspInit+0x16c>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_UART_MspInit+0x16c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012ca:	2308      	movs	r3, #8
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <HAL_UART_MspInit+0x178>)
 80012d6:	f000 fe05 	bl	8001ee4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_UART_MspInit+0x17c>)
 80012dc:	4a23      	ldr	r2, [pc, #140]	; (800136c <HAL_UART_MspInit+0x180>)
 80012de:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_UART_MspInit+0x17c>)
 80012e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <HAL_UART_MspInit+0x17c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_UART_MspInit+0x17c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_UART_MspInit+0x17c>)
 80012f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_UART_MspInit+0x17c>)
 80012fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001302:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_UART_MspInit+0x17c>)
 8001306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_UART_MspInit+0x17c>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0x17c>)
 8001314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001318:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_UART_MspInit+0x17c>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <HAL_UART_MspInit+0x17c>)
 8001322:	f000 fa63 	bl	80017ec <HAL_DMA_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_UART_MspInit+0x144>
      Error_Handler();
 800132c:	f7ff fed4 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_UART_MspInit+0x17c>)
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <HAL_UART_MspInit+0x17c>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2047      	movs	r0, #71	; 0x47
 8001342:	f000 fa1c 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001346:	2047      	movs	r0, #71	; 0x47
 8001348:	f000 fa35 	bl	80017b6 <HAL_NVIC_EnableIRQ>
}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40004400 	.word	0x40004400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	40011400 	.word	0x40011400
 8001364:	40020800 	.word	0x40020800
 8001368:	20000150 	.word	0x20000150
 800136c:	40026428 	.word	0x40026428

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8e4 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <USART2_IRQHandler+0x10>)
 80013ca:	f002 fb1b 	bl	8003a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000c0 	.word	0x200000c0

080013d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <DMA2_Stream1_IRQHandler+0x10>)
 80013de:	f000 fb45 	bl	8001a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000150 	.word	0x20000150

080013ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <USART6_IRQHandler+0x10>)
 80013f2:	f002 fb07 	bl	8003a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000108 	.word	0x20000108

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f003 fac6 	bl	80049c0 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20020000 	.word	0x20020000
 8001460:	00000400 	.word	0x00000400
 8001464:	200001b0 	.word	0x200001b0
 8001468:	20000300 	.word	0x20000300

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001494:	f7ff ffea 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f003 fa85 	bl	80049cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff f85b 	bl	800057c <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014d4:	08005458 	.word	0x08005458
  ldr r2, =_sbss
 80014d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014dc:	20000300 	.word	0x20000300

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_Init+0x40>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_Init+0x40>)
 80014fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x40>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f92b 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fde4 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f943 	bl	80017d2 <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f90b 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	200001b4 	.word	0x200001b4

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200001b4 	.word	0x200001b4

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff29 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff3e 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff8e 	bl	80016bc <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff31 	bl	800162c <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa2 	bl	8001724 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff feda 	bl	80015b0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e099      	b.n	800193c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001828:	e00f      	b.n	800184a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800182a:	f7ff fec1 	bl	80015b0 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b05      	cmp	r3, #5
 8001836:	d908      	bls.n	800184a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e078      	b.n	800193c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e8      	bne.n	800182a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_DMA_Init+0x158>)
 8001864:	4013      	ands	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001876:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d107      	bne.n	80018b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4313      	orrs	r3, r2
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f023 0307 	bic.w	r3, r3, #7
 80018ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d117      	bne.n	800190e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00e      	beq.n	800190e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fa7b 	bl	8001dec <DMA_CheckFifoParam>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800190a:	2301      	movs	r3, #1
 800190c:	e016      	b.n	800193c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fa32 	bl	8001d80 <DMA_CalcBaseAndBitshift>
 800191c:	4603      	mov	r3, r0
 800191e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	223f      	movs	r2, #63	; 0x3f
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	f010803f 	.word	0xf010803f

08001948 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001956:	f7ff fe2b 	bl	80015b0 <HAL_GetTick>
 800195a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d008      	beq.n	800197a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e052      	b.n	8001a20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0216 	bic.w	r2, r2, #22
 8001988:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001998:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <HAL_DMA_Abort+0x62>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0208 	bic.w	r2, r2, #8
 80019b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ca:	e013      	b.n	80019f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019cc:	f7ff fdf0 	bl	80015b0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d90c      	bls.n	80019f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2220      	movs	r2, #32
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2203      	movs	r2, #3
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e015      	b.n	8001a20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1e4      	bne.n	80019cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	223f      	movs	r2, #63	; 0x3f
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d004      	beq.n	8001a46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00c      	b.n	8001a60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2205      	movs	r2, #5
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a78:	4b8e      	ldr	r3, [pc, #568]	; (8001cb4 <HAL_DMA_IRQHandler+0x248>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a8e      	ldr	r2, [pc, #568]	; (8001cb8 <HAL_DMA_IRQHandler+0x24c>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0a9b      	lsrs	r3, r3, #10
 8001a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2208      	movs	r2, #8
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01a      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0204 	bic.w	r2, r2, #4
 8001abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2201      	movs	r2, #1
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2201      	movs	r2, #1
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f043 0202 	orr.w	r2, r3, #2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2204      	movs	r2, #4
 8001b14:	409a      	lsls	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d012      	beq.n	8001b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	2204      	movs	r2, #4
 8001b32:	409a      	lsls	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	f043 0204 	orr.w	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	2210      	movs	r2, #16
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d043      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03c      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2210      	movs	r2, #16
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d018      	beq.n	8001bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d108      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
 8001b9a:	e01f      	b.n	8001bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01b      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
 8001bac:	e016      	b.n	8001bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0208 	bic.w	r2, r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	2220      	movs	r2, #32
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 808f 	beq.w	8001d0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8087 	beq.w	8001d0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	2220      	movs	r2, #32
 8001c04:	409a      	lsls	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d136      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0216 	bic.w	r2, r2, #22
 8001c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x1da>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0208 	bic.w	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	223f      	movs	r2, #63	; 0x3f
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d07e      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
        }
        return;
 8001c82:	e079      	b.n	8001d78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01d      	beq.n	8001cce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10d      	bne.n	8001cbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d031      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
 8001cb0:	e02c      	b.n	8001d0c <HAL_DMA_IRQHandler+0x2a0>
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d023      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
 8001ccc:	e01e      	b.n	8001d0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10f      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0210 	bic.w	r2, r2, #16
 8001cea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d032      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d022      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2205      	movs	r2, #5
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d307      	bcc.n	8001d54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f2      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x2cc>
 8001d52:	e000      	b.n	8001d56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
 8001d76:	e000      	b.n	8001d7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d78:	bf00      	nop
    }
  }
}
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3b10      	subs	r3, #16
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d909      	bls.n	8001dc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	1d1a      	adds	r2, r3, #4
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc0:	e007      	b.n	8001dd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	aaaaaaab 	.word	0xaaaaaaab
 8001de8:	0800530c 	.word	0x0800530c

08001dec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d11f      	bne.n	8001e46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d856      	bhi.n	8001eba <DMA_CheckFifoParam+0xce>
 8001e0c:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <DMA_CheckFifoParam+0x28>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001e37 	.word	0x08001e37
 8001e1c:	08001e25 	.word	0x08001e25
 8001e20:	08001ebb 	.word	0x08001ebb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d046      	beq.n	8001ebe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e34:	e043      	b.n	8001ebe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e3e:	d140      	bne.n	8001ec2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e44:	e03d      	b.n	8001ec2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e4e:	d121      	bne.n	8001e94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d837      	bhi.n	8001ec6 <DMA_CheckFifoParam+0xda>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <DMA_CheckFifoParam+0x70>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001e6d 	.word	0x08001e6d
 8001e60:	08001e73 	.word	0x08001e73
 8001e64:	08001e6d 	.word	0x08001e6d
 8001e68:	08001e85 	.word	0x08001e85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e70:	e030      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d025      	beq.n	8001eca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e82:	e022      	b.n	8001eca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e8c:	d11f      	bne.n	8001ece <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e92:	e01c      	b.n	8001ece <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d903      	bls.n	8001ea2 <DMA_CheckFifoParam+0xb6>
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d003      	beq.n	8001ea8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ea0:	e018      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea6:	e015      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00e      	beq.n	8001ed2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb8:	e00b      	b.n	8001ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eba:	bf00      	nop
 8001ebc:	e00a      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ebe:	bf00      	nop
 8001ec0:	e008      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec2:	bf00      	nop
 8001ec4:	e006      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec6:	bf00      	nop
 8001ec8:	e004      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eca:	bf00      	nop
 8001ecc:	e002      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ece:	bf00      	nop
 8001ed0:	e000      	b.n	8001ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e159      	b.n	80021b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 8148 	bne.w	80021ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d130      	bne.n	8001f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d017      	beq.n	8001fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d123      	bne.n	8002028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80a2 	beq.w	80021ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b57      	ldr	r3, [pc, #348]	; (80021cc <HAL_GPIO_Init+0x2e8>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a56      	ldr	r2, [pc, #344]	; (80021cc <HAL_GPIO_Init+0x2e8>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b54      	ldr	r3, [pc, #336]	; (80021cc <HAL_GPIO_Init+0x2e8>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002086:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_GPIO_Init+0x2ec>)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a49      	ldr	r2, [pc, #292]	; (80021d4 <HAL_GPIO_Init+0x2f0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x202>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a48      	ldr	r2, [pc, #288]	; (80021d8 <HAL_GPIO_Init+0x2f4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x1fe>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a47      	ldr	r2, [pc, #284]	; (80021dc <HAL_GPIO_Init+0x2f8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x1fa>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x1f6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a45      	ldr	r2, [pc, #276]	; (80021e4 <HAL_GPIO_Init+0x300>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x1f2>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e008      	b.n	80020e8 <HAL_GPIO_Init+0x204>
 80020d6:	2307      	movs	r3, #7
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x204>
 80020da:	2303      	movs	r3, #3
 80020dc:	e004      	b.n	80020e8 <HAL_GPIO_Init+0x204>
 80020de:	2302      	movs	r3, #2
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_Init+0x204>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x204>
 80020e6:	2300      	movs	r3, #0
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f002 0203 	and.w	r2, r2, #3
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4093      	lsls	r3, r2
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f8:	4935      	ldr	r1, [pc, #212]	; (80021d0 <HAL_GPIO_Init+0x2ec>)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212a:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x304>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_GPIO_Init+0x304>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217e:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_GPIO_Init+0x304>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3301      	adds	r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	f67f aea2 	bls.w	8001f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40013800 	.word	0x40013800
 80021d4:	40020000 	.word	0x40020000
 80021d8:	40020400 	.word	0x40020400
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020c00 	.word	0x40020c00
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002208:	e003      	b.n	8002212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	619a      	str	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e267      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d075      	beq.n	800232a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223e:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d00c      	beq.n	8002264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4b85      	ldr	r3, [pc, #532]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002252:	2b08      	cmp	r3, #8
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b7e      	ldr	r3, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05b      	beq.n	8002328 <HAL_RCC_OscConfig+0x108>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d157      	bne.n	8002328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e242      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x74>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b70      	ldr	r3, [pc, #448]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6f      	ldr	r2, [pc, #444]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 80022b8:	4b69      	ldr	r3, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a68      	ldr	r2, [pc, #416]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b66      	ldr	r3, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a65      	ldr	r2, [pc, #404]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff f96a 	bl	80015b0 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff f966 	bl	80015b0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e207      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff f956 	bl	80015b0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff f952 	bl	80015b0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1f3      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1c7      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_RCC_OscConfig+0x244>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff f90b 	bl	80015b0 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff f907 	bl	80015b0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1a8      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4925      	ldr	r1, [pc, #148]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x244>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff f8ea 	bl	80015b0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7ff f8e6 	bl	80015b0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e187      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d036      	beq.n	8002478 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x248>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff f8ca 	bl	80015b0 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff f8c6 	bl	80015b0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e167      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x200>
 800243e:	e01b      	b.n	8002478 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x248>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff f8b3 	bl	80015b0 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e00e      	b.n	800246c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff f8af 	bl	80015b0 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d907      	bls.n	800246c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e150      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000
 8002468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ea      	bne.n	800244e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8097 	beq.w	80025b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b81      	ldr	r3, [pc, #516]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a7c      	ldr	r2, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b7a      	ldr	r3, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a73      	ldr	r2, [pc, #460]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff f86f 	bl	80015b0 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7ff f86b 	bl	80015b0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e10c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x2ea>
 80024fc:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b05      	cmp	r3, #5
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x30c>
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800252c:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	4b55      	ldr	r3, [pc, #340]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7ff f830 	bl	80015b0 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7ff f82c 	bl	80015b0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0cb      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ee      	beq.n	8002554 <HAL_RCC_OscConfig+0x334>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff f81a 	bl	80015b0 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7ff f816 	bl	80015b0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0b5      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002596:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a38      	ldr	r2, [pc, #224]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a1 	beq.w	8002700 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d05c      	beq.n	8002684 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d141      	bne.n	8002656 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe ffea 	bl	80015b0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe ffe6 	bl	80015b0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e087      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	491b      	ldr	r1, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe ffbf 	bl	80015b0 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe ffbb 	bl	80015b0 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e05c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x416>
 8002654:	e054      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe ffa8 	bl	80015b0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe ffa4 	bl	80015b0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e045      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x444>
 8002682:	e03d      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e038      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
 8002698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d028      	beq.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d121      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7fe fed6 	bl	80015b0 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fed2 	bl	80015b0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fe36 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080052f4 	.word	0x080052f4
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b090      	sub	sp, #64	; 0x40
 80028e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
 80028e8:	2300      	movs	r3, #0
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	2300      	movs	r3, #0
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d00d      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002900:	2b08      	cmp	r3, #8
 8002902:	f200 80a1 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x34>
 800290a:	2b04      	cmp	r3, #4
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x3a>
 800290e:	e09b      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002914:	e09b      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002916:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800291a:	e098      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d028      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	2200      	movs	r2, #0
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	627a      	str	r2, [r7, #36]	; 0x24
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002944:	2100      	movs	r1, #0
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002948:	fb03 f201 	mul.w	r2, r3, r1
 800294c:	2300      	movs	r3, #0
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	4413      	add	r3, r2
 8002954:	4a43      	ldr	r2, [pc, #268]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002956:	fba0 1202 	umull	r1, r2, r0, r2
 800295a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800295c:	460a      	mov	r2, r1
 800295e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002962:	4413      	add	r3, r2
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	2200      	movs	r2, #0
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	61fa      	str	r2, [r7, #28]
 800296e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002972:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002976:	f7fd fc83 	bl	8000280 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4613      	mov	r3, r2
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002982:	e053      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	2200      	movs	r2, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	617a      	str	r2, [r7, #20]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002996:	f04f 0b00 	mov.w	fp, #0
 800299a:	4652      	mov	r2, sl
 800299c:	465b      	mov	r3, fp
 800299e:	f04f 0000 	mov.w	r0, #0
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	0159      	lsls	r1, r3, #5
 80029a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ac:	0150      	lsls	r0, r2, #5
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	ebb2 080a 	subs.w	r8, r2, sl
 80029b6:	eb63 090b 	sbc.w	r9, r3, fp
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ce:	ebb2 0408 	subs.w	r4, r2, r8
 80029d2:	eb63 0509 	sbc.w	r5, r3, r9
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	00eb      	lsls	r3, r5, #3
 80029e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e4:	00e2      	lsls	r2, r4, #3
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	eb14 030a 	adds.w	r3, r4, sl
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	eb45 030b 	adc.w	r3, r5, fp
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a02:	4629      	mov	r1, r5
 8002a04:	028b      	lsls	r3, r1, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	028a      	lsls	r2, r1, #10
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	2200      	movs	r2, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a20:	f7fd fc2e 	bl	8000280 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3740      	adds	r7, #64	; 0x40
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	017d7840 	.word	0x017d7840

08002a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08005304 	.word	0x08005304

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aac:	f7ff ffdc 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0b5b      	lsrs	r3, r3, #13
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08005304 	.word	0x08005304

08002ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e041      	b.n	8002b66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fb1c 	bl	8001134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 fac0 	bl	8003094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e041      	b.n	8002c04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f839 	bl	8002c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f000 fa71 	bl	8003094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_TIM_PWM_Start+0x24>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e022      	b.n	8002c8a <HAL_TIM_PWM_Start+0x6a>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d109      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x3e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e015      	b.n	8002c8a <HAL_TIM_PWM_Start+0x6a>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d109      	bne.n	8002c78 <HAL_TIM_PWM_Start+0x58>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e008      	b.n	8002c8a <HAL_TIM_PWM_Start+0x6a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e068      	b.n	8002d64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0x82>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca0:	e013      	b.n	8002cca <HAL_TIM_PWM_Start+0xaa>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0x92>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	e00b      	b.n	8002cca <HAL_TIM_PWM_Start+0xaa>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0xa2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc0:	e003      	b.n	8002cca <HAL_TIM_PWM_Start+0xaa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	6839      	ldr	r1, [r7, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fc90 	bl	80035f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <HAL_TIM_PWM_Start+0x14c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d107      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_TIM_PWM_Start+0x14c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d013      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_TIM_PWM_Start+0x150>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_TIM_PWM_Start+0x154>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_TIM_PWM_Start+0x158>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <HAL_TIM_PWM_Start+0x15c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d010      	beq.n	8002d62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	e007      	b.n	8002d62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40000c00 	.word	0x40000c00
 8002d7c:	40014000 	.word	0x40014000

08002d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0ae      	b.n	8002efc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	f200 809f 	bhi.w	8002eec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	08002eed 	.word	0x08002eed
 8002dbc:	08002eed 	.word	0x08002eed
 8002dc0:	08002eed 	.word	0x08002eed
 8002dc4:	08002e29 	.word	0x08002e29
 8002dc8:	08002eed 	.word	0x08002eed
 8002dcc:	08002eed 	.word	0x08002eed
 8002dd0:	08002eed 	.word	0x08002eed
 8002dd4:	08002e6b 	.word	0x08002e6b
 8002dd8:	08002eed 	.word	0x08002eed
 8002ddc:	08002eed 	.word	0x08002eed
 8002de0:	08002eed 	.word	0x08002eed
 8002de4:	08002eab 	.word	0x08002eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f9dc 	bl	80031ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0208 	orr.w	r2, r2, #8
 8002e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6999      	ldr	r1, [r3, #24]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	619a      	str	r2, [r3, #24]
      break;
 8002e26:	e064      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fa22 	bl	8003278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6999      	ldr	r1, [r3, #24]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	021a      	lsls	r2, r3, #8
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	619a      	str	r2, [r3, #24]
      break;
 8002e68:	e043      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fa6d 	bl	8003350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0208 	orr.w	r2, r2, #8
 8002e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0204 	bic.w	r2, r2, #4
 8002e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69d9      	ldr	r1, [r3, #28]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
      break;
 8002ea8:	e023      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fab7 	bl	8003424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69d9      	ldr	r1, [r3, #28]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	61da      	str	r2, [r3, #28]
      break;
 8002eea:	e002      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIM_ConfigClockSource+0x1c>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e0b4      	b.n	800308a <HAL_TIM_ConfigClockSource+0x186>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f58:	d03e      	beq.n	8002fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	f200 8087 	bhi.w	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f66:	f000 8086 	beq.w	8003076 <HAL_TIM_ConfigClockSource+0x172>
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6e:	d87f      	bhi.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b70      	cmp	r3, #112	; 0x70
 8002f72:	d01a      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0xa6>
 8002f74:	2b70      	cmp	r3, #112	; 0x70
 8002f76:	d87b      	bhi.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b60      	cmp	r3, #96	; 0x60
 8002f7a:	d050      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x11a>
 8002f7c:	2b60      	cmp	r3, #96	; 0x60
 8002f7e:	d877      	bhi.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b50      	cmp	r3, #80	; 0x50
 8002f82:	d03c      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0xfa>
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d873      	bhi.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d058      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x13a>
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d86f      	bhi.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b30      	cmp	r3, #48	; 0x30
 8002f92:	d064      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x15a>
 8002f94:	2b30      	cmp	r3, #48	; 0x30
 8002f96:	d86b      	bhi.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d060      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x15a>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d867      	bhi.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d05c      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x15a>
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d05a      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x15a>
 8002fa8:	e062      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fba:	f000 fafd 	bl	80035b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	609a      	str	r2, [r3, #8]
      break;
 8002fd6:	e04f      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fe8:	f000 fae6 	bl	80035b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffa:	609a      	str	r2, [r3, #8]
      break;
 8002ffc:	e03c      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	461a      	mov	r2, r3
 800300c:	f000 fa5a 	bl	80034c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2150      	movs	r1, #80	; 0x50
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fab3 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 800301c:	e02c      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800302a:	461a      	mov	r2, r3
 800302c:	f000 fa79 	bl	8003522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2160      	movs	r1, #96	; 0x60
 8003036:	4618      	mov	r0, r3
 8003038:	f000 faa3 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 800303c:	e01c      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	461a      	mov	r2, r3
 800304c:	f000 fa3a 	bl	80034c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2140      	movs	r1, #64	; 0x40
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fa93 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 800305c:	e00c      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f000 fa8a 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 800306e:	e003      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      break;
 8003074:	e000      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a3a      	ldr	r2, [pc, #232]	; (8003190 <TIM_Base_SetConfig+0xfc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00f      	beq.n	80030cc <TIM_Base_SetConfig+0x38>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d00b      	beq.n	80030cc <TIM_Base_SetConfig+0x38>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a37      	ldr	r2, [pc, #220]	; (8003194 <TIM_Base_SetConfig+0x100>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d007      	beq.n	80030cc <TIM_Base_SetConfig+0x38>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a36      	ldr	r2, [pc, #216]	; (8003198 <TIM_Base_SetConfig+0x104>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_Base_SetConfig+0x38>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a35      	ldr	r2, [pc, #212]	; (800319c <TIM_Base_SetConfig+0x108>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <TIM_Base_SetConfig+0xfc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01b      	beq.n	800311e <TIM_Base_SetConfig+0x8a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d017      	beq.n	800311e <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a28      	ldr	r2, [pc, #160]	; (8003194 <TIM_Base_SetConfig+0x100>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <TIM_Base_SetConfig+0x104>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00f      	beq.n	800311e <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <TIM_Base_SetConfig+0x108>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <TIM_Base_SetConfig+0x10c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <TIM_Base_SetConfig+0x110>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0x8a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <TIM_Base_SetConfig+0x114>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <TIM_Base_SetConfig+0xfc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f023 0201 	bic.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]
  }
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800

080031ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f023 0201 	bic.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0302 	bic.w	r3, r3, #2
 80031f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <TIM_OC1_SetConfig+0xc8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10c      	bne.n	8003222 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0308 	bic.w	r3, r3, #8
 800320e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a13      	ldr	r2, [pc, #76]	; (8003274 <TIM_OC1_SetConfig+0xc8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d111      	bne.n	800324e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40010000 	.word	0x40010000

08003278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 0210 	bic.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0320 	bic.w	r3, r3, #32
 80032c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <TIM_OC2_SetConfig+0xd4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10d      	bne.n	80032f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <TIM_OC2_SetConfig+0xd4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d113      	bne.n	8003324 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800330a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000

08003350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <TIM_OC3_SetConfig+0xd0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10d      	bne.n	80033ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a14      	ldr	r2, [pc, #80]	; (8003420 <TIM_OC3_SetConfig+0xd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d113      	bne.n	80033fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40010000 	.word	0x40010000

08003424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800346e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <TIM_OC4_SetConfig+0x9c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d109      	bne.n	8003498 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000

080034c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f023 0201 	bic.w	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f023 030a 	bic.w	r3, r3, #10
 8003500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f023 0210 	bic.w	r2, r3, #16
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800354c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	031b      	lsls	r3, r3, #12
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800355e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	f043 0307 	orr.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	021a      	lsls	r2, r3, #8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	431a      	orrs	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2201      	movs	r2, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003658:	2302      	movs	r3, #2
 800365a:	e050      	b.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d013      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10c      	bne.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40014000 	.word	0x40014000

08003720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e042      	b.n	80037b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fd50 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fdff 	bl	8004368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d175      	bne.n	80038cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Transmit+0x2c>
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e06e      	b.n	80038ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fe:	f7fd fed7 	bl	80015b0 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003818:	d108      	bne.n	800382c <HAL_UART_Transmit+0x6c>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e003      	b.n	8003834 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003834:	e02e      	b.n	8003894 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fb9b 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e03a      	b.n	80038ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	3302      	adds	r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	e007      	b.n	8003886 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3301      	adds	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1cb      	bne.n	8003836 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2140      	movs	r1, #64	; 0x40
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fb67 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e006      	b.n	80038ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b08a      	sub	sp, #40	; 0x28
 80038da:	af02      	add	r7, sp, #8
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	f040 8081 	bne.w	80039fa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_UART_Receive+0x2e>
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e079      	b.n	80039fc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2222      	movs	r2, #34	; 0x22
 8003912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391c:	f7fd fe48 	bl	80015b0 <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003936:	d108      	bne.n	800394a <HAL_UART_Receive+0x74>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e003      	b.n	8003952 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003952:	e047      	b.n	80039e4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2200      	movs	r2, #0
 800395c:	2120      	movs	r1, #32
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fb0c 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e042      	b.n	80039fc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10c      	bne.n	8003996 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003988:	b29a      	uxth	r2, r3
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3302      	adds	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e01f      	b.n	80039d6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	d007      	beq.n	80039b0 <HAL_UART_Receive+0xda>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_UART_Receive+0xe8>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e008      	b.n	80039d0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1b2      	bne.n	8003954 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0ba      	sub	sp, #232	; 0xe8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_UART_IRQHandler+0x66>
 8003a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fbc2 	bl	80041ec <UART_Receive_IT>
      return;
 8003a68:	e25b      	b.n	8003f22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80de 	beq.w	8003c30 <HAL_UART_IRQHandler+0x22c>
 8003a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80d1 	beq.w	8003c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xae>
 8003a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xd2>
 8003abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_UART_IRQHandler+0xf6>
 8003ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <HAL_UART_IRQHandler+0x126>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0208 	orr.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 81f2 	beq.w	8003f18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_UART_IRQHandler+0x14e>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fb4d 	bl	80041ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <HAL_UART_IRQHandler+0x17a>
 8003b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04f      	beq.n	8003c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa55 	bl	800402e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d141      	bne.n	8003c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1d9      	bne.n	8003b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	4a7e      	ldr	r2, [pc, #504]	; (8003de4 <HAL_UART_IRQHandler+0x3e0>)
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd ff18 	bl	8001a28 <HAL_DMA_Abort_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e00e      	b.n	8003c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f99e 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	e00a      	b.n	8003c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f99a 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e006      	b.n	8003c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f996 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c2a:	e175      	b.n	8003f18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	bf00      	nop
    return;
 8003c2e:	e173      	b.n	8003f18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	f040 814f 	bne.w	8003ed8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8148 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8141 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	f040 80b6 	bne.w	8003de8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8145 	beq.w	8003f1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	f080 813e 	bcs.w	8003f1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb2:	f000 8088 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1d9      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e1      	bne.n	8003d02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e3      	bne.n	8003d3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d96:	f023 0310 	bic.w	r3, r3, #16
 8003d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e3      	bne.n	8003d84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd fdc1 	bl	8001948 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f8c1 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003de2:	e09b      	b.n	8003f1c <HAL_UART_IRQHandler+0x518>
 8003de4:	080040f5 	.word	0x080040f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 808e 	beq.w	8003f20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8089 	beq.w	8003f20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e32:	647a      	str	r2, [r7, #68]	; 0x44
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e3      	bne.n	8003e0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	623b      	str	r3, [r7, #32]
   return(result);
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e3      	bne.n	8003e46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0310 	bic.w	r3, r3, #16
 8003ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003eb0:	61fa      	str	r2, [r7, #28]
 8003eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	69b9      	ldr	r1, [r7, #24]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e3      	bne.n	8003e8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f847 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ed6:	e023      	b.n	8003f20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x4f4>
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f913 	bl	800411c <UART_Transmit_IT>
    return;
 8003ef6:	e014      	b.n	8003f22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <HAL_UART_IRQHandler+0x51e>
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f953 	bl	80041bc <UART_EndTransmit_IT>
    return;
 8003f16:	e004      	b.n	8003f22 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f20:	bf00      	nop
  }
}
 8003f22:	37e8      	adds	r7, #232	; 0xe8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8c:	e03b      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d037      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f96:	f7fd fb0b 	bl	80015b0 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6a3a      	ldr	r2, [r7, #32]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d302      	bcc.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e03a      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d023      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d020      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d01d      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d116      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f81d 	bl	800402e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e00f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	429a      	cmp	r2, r3
 8004022:	d0b4      	beq.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800402e:	b480      	push	{r7}
 8004030:	b095      	sub	sp, #84	; 0x54
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800404c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004056:	643a      	str	r2, [r7, #64]	; 0x40
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800405c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	61fb      	str	r3, [r7, #28]
   return(result);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	64bb      	str	r3, [r7, #72]	; 0x48
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3314      	adds	r3, #20
 8004088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800408a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d119      	bne.n	80040da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f023 0310 	bic.w	r3, r3, #16
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c6:	61ba      	str	r2, [r7, #24]
 80040c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	613b      	str	r3, [r7, #16]
   return(result);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040e8:	bf00      	nop
 80040ea:	3754      	adds	r7, #84	; 0x54
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff1e 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b21      	cmp	r3, #33	; 0x21
 800412e:	d13e      	bne.n	80041ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004138:	d114      	bne.n	8004164 <UART_Transmit_IT+0x48>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d110      	bne.n	8004164 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004156:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]
 8004162:	e008      	b.n	8004176 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6211      	str	r1, [r2, #32]
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29b      	uxth	r3, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4619      	mov	r1, r3
 8004184:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004198:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fea3 	bl	8003f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	; 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b22      	cmp	r3, #34	; 0x22
 80041fe:	f040 80ae 	bne.w	800435e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420a:	d117      	bne.n	800423c <UART_Receive_IT+0x50>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d113      	bne.n	800423c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	b29a      	uxth	r2, r3
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	629a      	str	r2, [r3, #40]	; 0x28
 800423a:	e026      	b.n	800428a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	d007      	beq.n	8004260 <UART_Receive_IT+0x74>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <UART_Receive_IT+0x82>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e008      	b.n	8004280 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800427a:	b2da      	uxtb	r2, r3
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800429a:	2b00      	cmp	r3, #0
 800429c:	d15d      	bne.n	800435a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0220 	bic.w	r2, r2, #32
 80042ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d135      	bne.n	8004350 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	613b      	str	r3, [r7, #16]
   return(result);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430a:	623a      	str	r2, [r7, #32]
 800430c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	61bb      	str	r3, [r7, #24]
   return(result);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e5      	bne.n	80042ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d10a      	bne.n	8004342 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fe0b 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
 800434e:	e002      	b.n	8004356 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fdf3 	bl	8003f3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e002      	b.n	8004360 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3730      	adds	r7, #48	; 0x30
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800436c:	b0c0      	sub	sp, #256	; 0x100
 800436e:	af00      	add	r7, sp, #0
 8004370:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	68d9      	ldr	r1, [r3, #12]
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	ea40 0301 	orr.w	r3, r0, r1
 8004390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	431a      	orrs	r2, r3
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043c0:	f021 010c 	bic.w	r1, r1, #12
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ce:	430b      	orrs	r3, r1
 80043d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e2:	6999      	ldr	r1, [r3, #24]
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	ea40 0301 	orr.w	r3, r0, r1
 80043ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b8f      	ldr	r3, [pc, #572]	; (8004634 <UART_SetConfig+0x2cc>)
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d005      	beq.n	8004408 <UART_SetConfig+0xa0>
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b8d      	ldr	r3, [pc, #564]	; (8004638 <UART_SetConfig+0x2d0>)
 8004404:	429a      	cmp	r2, r3
 8004406:	d104      	bne.n	8004412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7fe fb4e 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 800440c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004410:	e003      	b.n	800441a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004412:	f7fe fb35 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8004416:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	f040 810c 	bne.w	8004640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800442c:	2200      	movs	r2, #0
 800442e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004432:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800443a:	4622      	mov	r2, r4
 800443c:	462b      	mov	r3, r5
 800443e:	1891      	adds	r1, r2, r2
 8004440:	65b9      	str	r1, [r7, #88]	; 0x58
 8004442:	415b      	adcs	r3, r3
 8004444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800444a:	4621      	mov	r1, r4
 800444c:	eb12 0801 	adds.w	r8, r2, r1
 8004450:	4629      	mov	r1, r5
 8004452:	eb43 0901 	adc.w	r9, r3, r1
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446a:	4690      	mov	r8, r2
 800446c:	4699      	mov	r9, r3
 800446e:	4623      	mov	r3, r4
 8004470:	eb18 0303 	adds.w	r3, r8, r3
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004478:	462b      	mov	r3, r5
 800447a:	eb49 0303 	adc.w	r3, r9, r3
 800447e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800448e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004496:	460b      	mov	r3, r1
 8004498:	18db      	adds	r3, r3, r3
 800449a:	653b      	str	r3, [r7, #80]	; 0x50
 800449c:	4613      	mov	r3, r2
 800449e:	eb42 0303 	adc.w	r3, r2, r3
 80044a2:	657b      	str	r3, [r7, #84]	; 0x54
 80044a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044ac:	f7fb fee8 	bl	8000280 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4b61      	ldr	r3, [pc, #388]	; (800463c <UART_SetConfig+0x2d4>)
 80044b6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	011c      	lsls	r4, r3, #4
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044d8:	415b      	adcs	r3, r3
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044e0:	4641      	mov	r1, r8
 80044e2:	eb12 0a01 	adds.w	sl, r2, r1
 80044e6:	4649      	mov	r1, r9
 80044e8:	eb43 0b01 	adc.w	fp, r3, r1
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004500:	4692      	mov	sl, r2
 8004502:	469b      	mov	fp, r3
 8004504:	4643      	mov	r3, r8
 8004506:	eb1a 0303 	adds.w	r3, sl, r3
 800450a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800450e:	464b      	mov	r3, r9
 8004510:	eb4b 0303 	adc.w	r3, fp, r3
 8004514:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004524:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800452c:	460b      	mov	r3, r1
 800452e:	18db      	adds	r3, r3, r3
 8004530:	643b      	str	r3, [r7, #64]	; 0x40
 8004532:	4613      	mov	r3, r2
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
 800453a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800453e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004542:	f7fb fe9d 	bl	8000280 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4611      	mov	r1, r2
 800454c:	4b3b      	ldr	r3, [pc, #236]	; (800463c <UART_SetConfig+0x2d4>)
 800454e:	fba3 2301 	umull	r2, r3, r3, r1
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2264      	movs	r2, #100	; 0x64
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	1acb      	subs	r3, r1, r3
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <UART_SetConfig+0x2d4>)
 8004564:	fba3 2302 	umull	r2, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004570:	441c      	add	r4, r3
 8004572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800457c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004584:	4642      	mov	r2, r8
 8004586:	464b      	mov	r3, r9
 8004588:	1891      	adds	r1, r2, r2
 800458a:	63b9      	str	r1, [r7, #56]	; 0x38
 800458c:	415b      	adcs	r3, r3
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004594:	4641      	mov	r1, r8
 8004596:	1851      	adds	r1, r2, r1
 8004598:	6339      	str	r1, [r7, #48]	; 0x30
 800459a:	4649      	mov	r1, r9
 800459c:	414b      	adcs	r3, r1
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045ac:	4659      	mov	r1, fp
 80045ae:	00cb      	lsls	r3, r1, #3
 80045b0:	4651      	mov	r1, sl
 80045b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b6:	4651      	mov	r1, sl
 80045b8:	00ca      	lsls	r2, r1, #3
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	4642      	mov	r2, r8
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045c8:	464b      	mov	r3, r9
 80045ca:	460a      	mov	r2, r1
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045e8:	460b      	mov	r3, r1
 80045ea:	18db      	adds	r3, r3, r3
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ee:	4613      	mov	r3, r2
 80045f0:	eb42 0303 	adc.w	r3, r2, r3
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045fe:	f7fb fe3f 	bl	8000280 <__aeabi_uldivmod>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <UART_SetConfig+0x2d4>)
 8004608:	fba3 1302 	umull	r1, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	2164      	movs	r1, #100	; 0x64
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	3332      	adds	r3, #50	; 0x32
 800461a:	4a08      	ldr	r2, [pc, #32]	; (800463c <UART_SetConfig+0x2d4>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	f003 0207 	and.w	r2, r3, #7
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4422      	add	r2, r4
 800462e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004630:	e106      	b.n	8004840 <UART_SetConfig+0x4d8>
 8004632:	bf00      	nop
 8004634:	40011000 	.word	0x40011000
 8004638:	40011400 	.word	0x40011400
 800463c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004644:	2200      	movs	r2, #0
 8004646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800464a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800464e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004652:	4642      	mov	r2, r8
 8004654:	464b      	mov	r3, r9
 8004656:	1891      	adds	r1, r2, r2
 8004658:	6239      	str	r1, [r7, #32]
 800465a:	415b      	adcs	r3, r3
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004662:	4641      	mov	r1, r8
 8004664:	1854      	adds	r4, r2, r1
 8004666:	4649      	mov	r1, r9
 8004668:	eb43 0501 	adc.w	r5, r3, r1
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	00eb      	lsls	r3, r5, #3
 8004676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800467a:	00e2      	lsls	r2, r4, #3
 800467c:	4614      	mov	r4, r2
 800467e:	461d      	mov	r5, r3
 8004680:	4643      	mov	r3, r8
 8004682:	18e3      	adds	r3, r4, r3
 8004684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004688:	464b      	mov	r3, r9
 800468a:	eb45 0303 	adc.w	r3, r5, r3
 800468e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800469e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046ae:	4629      	mov	r1, r5
 80046b0:	008b      	lsls	r3, r1, #2
 80046b2:	4621      	mov	r1, r4
 80046b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b8:	4621      	mov	r1, r4
 80046ba:	008a      	lsls	r2, r1, #2
 80046bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046c0:	f7fb fdde 	bl	8000280 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4b60      	ldr	r3, [pc, #384]	; (800484c <UART_SetConfig+0x4e4>)
 80046ca:	fba3 2302 	umull	r2, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	011c      	lsls	r4, r3, #4
 80046d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	61b9      	str	r1, [r7, #24]
 80046ec:	415b      	adcs	r3, r3
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f4:	4641      	mov	r1, r8
 80046f6:	1851      	adds	r1, r2, r1
 80046f8:	6139      	str	r1, [r7, #16]
 80046fa:	4649      	mov	r1, r9
 80046fc:	414b      	adcs	r3, r1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800470c:	4659      	mov	r1, fp
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004716:	4651      	mov	r1, sl
 8004718:	00ca      	lsls	r2, r1, #3
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	4603      	mov	r3, r0
 8004720:	4642      	mov	r2, r8
 8004722:	189b      	adds	r3, r3, r2
 8004724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004728:	464b      	mov	r3, r9
 800472a:	460a      	mov	r2, r1
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	67bb      	str	r3, [r7, #120]	; 0x78
 800473e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800474c:	4649      	mov	r1, r9
 800474e:	008b      	lsls	r3, r1, #2
 8004750:	4641      	mov	r1, r8
 8004752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004756:	4641      	mov	r1, r8
 8004758:	008a      	lsls	r2, r1, #2
 800475a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800475e:	f7fb fd8f 	bl	8000280 <__aeabi_uldivmod>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4611      	mov	r1, r2
 8004768:	4b38      	ldr	r3, [pc, #224]	; (800484c <UART_SetConfig+0x4e4>)
 800476a:	fba3 2301 	umull	r2, r3, r3, r1
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2264      	movs	r2, #100	; 0x64
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	1acb      	subs	r3, r1, r3
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	3332      	adds	r3, #50	; 0x32
 800477c:	4a33      	ldr	r2, [pc, #204]	; (800484c <UART_SetConfig+0x4e4>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004788:	441c      	add	r4, r3
 800478a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800478e:	2200      	movs	r2, #0
 8004790:	673b      	str	r3, [r7, #112]	; 0x70
 8004792:	677a      	str	r2, [r7, #116]	; 0x74
 8004794:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	1891      	adds	r1, r2, r2
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	415b      	adcs	r3, r3
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a8:	4641      	mov	r1, r8
 80047aa:	1851      	adds	r1, r2, r1
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	4649      	mov	r1, r9
 80047b0:	414b      	adcs	r3, r1
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047c0:	4659      	mov	r1, fp
 80047c2:	00cb      	lsls	r3, r1, #3
 80047c4:	4651      	mov	r1, sl
 80047c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ca:	4651      	mov	r1, sl
 80047cc:	00ca      	lsls	r2, r1, #3
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	4642      	mov	r2, r8
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047da:	464b      	mov	r3, r9
 80047dc:	460a      	mov	r2, r1
 80047de:	eb42 0303 	adc.w	r3, r2, r3
 80047e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	663b      	str	r3, [r7, #96]	; 0x60
 80047ee:	667a      	str	r2, [r7, #100]	; 0x64
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047fc:	4649      	mov	r1, r9
 80047fe:	008b      	lsls	r3, r1, #2
 8004800:	4641      	mov	r1, r8
 8004802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004806:	4641      	mov	r1, r8
 8004808:	008a      	lsls	r2, r1, #2
 800480a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800480e:	f7fb fd37 	bl	8000280 <__aeabi_uldivmod>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <UART_SetConfig+0x4e4>)
 8004818:	fba3 1302 	umull	r1, r3, r3, r2
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	2164      	movs	r1, #100	; 0x64
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	3332      	adds	r3, #50	; 0x32
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <UART_SetConfig+0x4e4>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	f003 020f 	and.w	r2, r3, #15
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4422      	add	r2, r4
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800484c:	51eb851f 	.word	0x51eb851f

08004850 <atoi>:
 8004850:	220a      	movs	r2, #10
 8004852:	2100      	movs	r1, #0
 8004854:	f000 b882 	b.w	800495c <strtol>

08004858 <_strtol_l.constprop.0>:
 8004858:	2b01      	cmp	r3, #1
 800485a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800485e:	d001      	beq.n	8004864 <_strtol_l.constprop.0+0xc>
 8004860:	2b24      	cmp	r3, #36	; 0x24
 8004862:	d906      	bls.n	8004872 <_strtol_l.constprop.0+0x1a>
 8004864:	f000 f8ac 	bl	80049c0 <__errno>
 8004868:	2316      	movs	r3, #22
 800486a:	6003      	str	r3, [r0, #0]
 800486c:	2000      	movs	r0, #0
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004958 <_strtol_l.constprop.0+0x100>
 8004876:	460d      	mov	r5, r1
 8004878:	462e      	mov	r6, r5
 800487a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800487e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004882:	f017 0708 	ands.w	r7, r7, #8
 8004886:	d1f7      	bne.n	8004878 <_strtol_l.constprop.0+0x20>
 8004888:	2c2d      	cmp	r4, #45	; 0x2d
 800488a:	d132      	bne.n	80048f2 <_strtol_l.constprop.0+0x9a>
 800488c:	782c      	ldrb	r4, [r5, #0]
 800488e:	2701      	movs	r7, #1
 8004890:	1cb5      	adds	r5, r6, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d05b      	beq.n	800494e <_strtol_l.constprop.0+0xf6>
 8004896:	2b10      	cmp	r3, #16
 8004898:	d109      	bne.n	80048ae <_strtol_l.constprop.0+0x56>
 800489a:	2c30      	cmp	r4, #48	; 0x30
 800489c:	d107      	bne.n	80048ae <_strtol_l.constprop.0+0x56>
 800489e:	782c      	ldrb	r4, [r5, #0]
 80048a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80048a4:	2c58      	cmp	r4, #88	; 0x58
 80048a6:	d14d      	bne.n	8004944 <_strtol_l.constprop.0+0xec>
 80048a8:	786c      	ldrb	r4, [r5, #1]
 80048aa:	2310      	movs	r3, #16
 80048ac:	3502      	adds	r5, #2
 80048ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80048b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80048b6:	f04f 0e00 	mov.w	lr, #0
 80048ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80048be:	4676      	mov	r6, lr
 80048c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80048c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80048c8:	f1bc 0f09 	cmp.w	ip, #9
 80048cc:	d816      	bhi.n	80048fc <_strtol_l.constprop.0+0xa4>
 80048ce:	4664      	mov	r4, ip
 80048d0:	42a3      	cmp	r3, r4
 80048d2:	dd24      	ble.n	800491e <_strtol_l.constprop.0+0xc6>
 80048d4:	f1be 3fff 	cmp.w	lr, #4294967295
 80048d8:	d008      	beq.n	80048ec <_strtol_l.constprop.0+0x94>
 80048da:	45b1      	cmp	r9, r6
 80048dc:	d31c      	bcc.n	8004918 <_strtol_l.constprop.0+0xc0>
 80048de:	d101      	bne.n	80048e4 <_strtol_l.constprop.0+0x8c>
 80048e0:	45a2      	cmp	sl, r4
 80048e2:	db19      	blt.n	8004918 <_strtol_l.constprop.0+0xc0>
 80048e4:	fb06 4603 	mla	r6, r6, r3, r4
 80048e8:	f04f 0e01 	mov.w	lr, #1
 80048ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048f0:	e7e8      	b.n	80048c4 <_strtol_l.constprop.0+0x6c>
 80048f2:	2c2b      	cmp	r4, #43	; 0x2b
 80048f4:	bf04      	itt	eq
 80048f6:	782c      	ldrbeq	r4, [r5, #0]
 80048f8:	1cb5      	addeq	r5, r6, #2
 80048fa:	e7ca      	b.n	8004892 <_strtol_l.constprop.0+0x3a>
 80048fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004900:	f1bc 0f19 	cmp.w	ip, #25
 8004904:	d801      	bhi.n	800490a <_strtol_l.constprop.0+0xb2>
 8004906:	3c37      	subs	r4, #55	; 0x37
 8004908:	e7e2      	b.n	80048d0 <_strtol_l.constprop.0+0x78>
 800490a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800490e:	f1bc 0f19 	cmp.w	ip, #25
 8004912:	d804      	bhi.n	800491e <_strtol_l.constprop.0+0xc6>
 8004914:	3c57      	subs	r4, #87	; 0x57
 8004916:	e7db      	b.n	80048d0 <_strtol_l.constprop.0+0x78>
 8004918:	f04f 3eff 	mov.w	lr, #4294967295
 800491c:	e7e6      	b.n	80048ec <_strtol_l.constprop.0+0x94>
 800491e:	f1be 3fff 	cmp.w	lr, #4294967295
 8004922:	d105      	bne.n	8004930 <_strtol_l.constprop.0+0xd8>
 8004924:	2322      	movs	r3, #34	; 0x22
 8004926:	6003      	str	r3, [r0, #0]
 8004928:	4646      	mov	r6, r8
 800492a:	b942      	cbnz	r2, 800493e <_strtol_l.constprop.0+0xe6>
 800492c:	4630      	mov	r0, r6
 800492e:	e79e      	b.n	800486e <_strtol_l.constprop.0+0x16>
 8004930:	b107      	cbz	r7, 8004934 <_strtol_l.constprop.0+0xdc>
 8004932:	4276      	negs	r6, r6
 8004934:	2a00      	cmp	r2, #0
 8004936:	d0f9      	beq.n	800492c <_strtol_l.constprop.0+0xd4>
 8004938:	f1be 0f00 	cmp.w	lr, #0
 800493c:	d000      	beq.n	8004940 <_strtol_l.constprop.0+0xe8>
 800493e:	1e69      	subs	r1, r5, #1
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	e7f3      	b.n	800492c <_strtol_l.constprop.0+0xd4>
 8004944:	2430      	movs	r4, #48	; 0x30
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1b1      	bne.n	80048ae <_strtol_l.constprop.0+0x56>
 800494a:	2308      	movs	r3, #8
 800494c:	e7af      	b.n	80048ae <_strtol_l.constprop.0+0x56>
 800494e:	2c30      	cmp	r4, #48	; 0x30
 8004950:	d0a5      	beq.n	800489e <_strtol_l.constprop.0+0x46>
 8004952:	230a      	movs	r3, #10
 8004954:	e7ab      	b.n	80048ae <_strtol_l.constprop.0+0x56>
 8004956:	bf00      	nop
 8004958:	08005315 	.word	0x08005315

0800495c <strtol>:
 800495c:	4613      	mov	r3, r2
 800495e:	460a      	mov	r2, r1
 8004960:	4601      	mov	r1, r0
 8004962:	4802      	ldr	r0, [pc, #8]	; (800496c <strtol+0x10>)
 8004964:	6800      	ldr	r0, [r0, #0]
 8004966:	f7ff bf77 	b.w	8004858 <_strtol_l.constprop.0>
 800496a:	bf00      	nop
 800496c:	20000058 	.word	0x20000058

08004970 <siprintf>:
 8004970:	b40e      	push	{r1, r2, r3}
 8004972:	b500      	push	{lr}
 8004974:	b09c      	sub	sp, #112	; 0x70
 8004976:	ab1d      	add	r3, sp, #116	; 0x74
 8004978:	9002      	str	r0, [sp, #8]
 800497a:	9006      	str	r0, [sp, #24]
 800497c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004980:	4809      	ldr	r0, [pc, #36]	; (80049a8 <siprintf+0x38>)
 8004982:	9107      	str	r1, [sp, #28]
 8004984:	9104      	str	r1, [sp, #16]
 8004986:	4909      	ldr	r1, [pc, #36]	; (80049ac <siprintf+0x3c>)
 8004988:	f853 2b04 	ldr.w	r2, [r3], #4
 800498c:	9105      	str	r1, [sp, #20]
 800498e:	6800      	ldr	r0, [r0, #0]
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	a902      	add	r1, sp, #8
 8004994:	f000 f99a 	bl	8004ccc <_svfiprintf_r>
 8004998:	9b02      	ldr	r3, [sp, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	b01c      	add	sp, #112	; 0x70
 80049a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049a4:	b003      	add	sp, #12
 80049a6:	4770      	bx	lr
 80049a8:	20000058 	.word	0x20000058
 80049ac:	ffff0208 	.word	0xffff0208

080049b0 <memset>:
 80049b0:	4402      	add	r2, r0
 80049b2:	4603      	mov	r3, r0
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d100      	bne.n	80049ba <memset+0xa>
 80049b8:	4770      	bx	lr
 80049ba:	f803 1b01 	strb.w	r1, [r3], #1
 80049be:	e7f9      	b.n	80049b4 <memset+0x4>

080049c0 <__errno>:
 80049c0:	4b01      	ldr	r3, [pc, #4]	; (80049c8 <__errno+0x8>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000058 	.word	0x20000058

080049cc <__libc_init_array>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	4d0d      	ldr	r5, [pc, #52]	; (8004a04 <__libc_init_array+0x38>)
 80049d0:	4c0d      	ldr	r4, [pc, #52]	; (8004a08 <__libc_init_array+0x3c>)
 80049d2:	1b64      	subs	r4, r4, r5
 80049d4:	10a4      	asrs	r4, r4, #2
 80049d6:	2600      	movs	r6, #0
 80049d8:	42a6      	cmp	r6, r4
 80049da:	d109      	bne.n	80049f0 <__libc_init_array+0x24>
 80049dc:	4d0b      	ldr	r5, [pc, #44]	; (8004a0c <__libc_init_array+0x40>)
 80049de:	4c0c      	ldr	r4, [pc, #48]	; (8004a10 <__libc_init_array+0x44>)
 80049e0:	f000 fc72 	bl	80052c8 <_init>
 80049e4:	1b64      	subs	r4, r4, r5
 80049e6:	10a4      	asrs	r4, r4, #2
 80049e8:	2600      	movs	r6, #0
 80049ea:	42a6      	cmp	r6, r4
 80049ec:	d105      	bne.n	80049fa <__libc_init_array+0x2e>
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f4:	4798      	blx	r3
 80049f6:	3601      	adds	r6, #1
 80049f8:	e7ee      	b.n	80049d8 <__libc_init_array+0xc>
 80049fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fe:	4798      	blx	r3
 8004a00:	3601      	adds	r6, #1
 8004a02:	e7f2      	b.n	80049ea <__libc_init_array+0x1e>
 8004a04:	08005450 	.word	0x08005450
 8004a08:	08005450 	.word	0x08005450
 8004a0c:	08005450 	.word	0x08005450
 8004a10:	08005454 	.word	0x08005454

08004a14 <__retarget_lock_acquire_recursive>:
 8004a14:	4770      	bx	lr

08004a16 <__retarget_lock_release_recursive>:
 8004a16:	4770      	bx	lr

08004a18 <strcpy>:
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1e:	f803 2b01 	strb.w	r2, [r3], #1
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d1f9      	bne.n	8004a1a <strcpy+0x2>
 8004a26:	4770      	bx	lr

08004a28 <_free_r>:
 8004a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a2a:	2900      	cmp	r1, #0
 8004a2c:	d044      	beq.n	8004ab8 <_free_r+0x90>
 8004a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a32:	9001      	str	r0, [sp, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f1a1 0404 	sub.w	r4, r1, #4
 8004a3a:	bfb8      	it	lt
 8004a3c:	18e4      	addlt	r4, r4, r3
 8004a3e:	f000 f8df 	bl	8004c00 <__malloc_lock>
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <_free_r+0x94>)
 8004a44:	9801      	ldr	r0, [sp, #4]
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	b933      	cbnz	r3, 8004a58 <_free_r+0x30>
 8004a4a:	6063      	str	r3, [r4, #4]
 8004a4c:	6014      	str	r4, [r2, #0]
 8004a4e:	b003      	add	sp, #12
 8004a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a54:	f000 b8da 	b.w	8004c0c <__malloc_unlock>
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d908      	bls.n	8004a6e <_free_r+0x46>
 8004a5c:	6825      	ldr	r5, [r4, #0]
 8004a5e:	1961      	adds	r1, r4, r5
 8004a60:	428b      	cmp	r3, r1
 8004a62:	bf01      	itttt	eq
 8004a64:	6819      	ldreq	r1, [r3, #0]
 8004a66:	685b      	ldreq	r3, [r3, #4]
 8004a68:	1949      	addeq	r1, r1, r5
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	e7ed      	b.n	8004a4a <_free_r+0x22>
 8004a6e:	461a      	mov	r2, r3
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	b10b      	cbz	r3, 8004a78 <_free_r+0x50>
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	d9fa      	bls.n	8004a6e <_free_r+0x46>
 8004a78:	6811      	ldr	r1, [r2, #0]
 8004a7a:	1855      	adds	r5, r2, r1
 8004a7c:	42a5      	cmp	r5, r4
 8004a7e:	d10b      	bne.n	8004a98 <_free_r+0x70>
 8004a80:	6824      	ldr	r4, [r4, #0]
 8004a82:	4421      	add	r1, r4
 8004a84:	1854      	adds	r4, r2, r1
 8004a86:	42a3      	cmp	r3, r4
 8004a88:	6011      	str	r1, [r2, #0]
 8004a8a:	d1e0      	bne.n	8004a4e <_free_r+0x26>
 8004a8c:	681c      	ldr	r4, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	6053      	str	r3, [r2, #4]
 8004a92:	440c      	add	r4, r1
 8004a94:	6014      	str	r4, [r2, #0]
 8004a96:	e7da      	b.n	8004a4e <_free_r+0x26>
 8004a98:	d902      	bls.n	8004aa0 <_free_r+0x78>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	6003      	str	r3, [r0, #0]
 8004a9e:	e7d6      	b.n	8004a4e <_free_r+0x26>
 8004aa0:	6825      	ldr	r5, [r4, #0]
 8004aa2:	1961      	adds	r1, r4, r5
 8004aa4:	428b      	cmp	r3, r1
 8004aa6:	bf04      	itt	eq
 8004aa8:	6819      	ldreq	r1, [r3, #0]
 8004aaa:	685b      	ldreq	r3, [r3, #4]
 8004aac:	6063      	str	r3, [r4, #4]
 8004aae:	bf04      	itt	eq
 8004ab0:	1949      	addeq	r1, r1, r5
 8004ab2:	6021      	streq	r1, [r4, #0]
 8004ab4:	6054      	str	r4, [r2, #4]
 8004ab6:	e7ca      	b.n	8004a4e <_free_r+0x26>
 8004ab8:	b003      	add	sp, #12
 8004aba:	bd30      	pop	{r4, r5, pc}
 8004abc:	200002f8 	.word	0x200002f8

08004ac0 <sbrk_aligned>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4e0e      	ldr	r6, [pc, #56]	; (8004afc <sbrk_aligned+0x3c>)
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	6831      	ldr	r1, [r6, #0]
 8004ac8:	4605      	mov	r5, r0
 8004aca:	b911      	cbnz	r1, 8004ad2 <sbrk_aligned+0x12>
 8004acc:	f000 fba6 	bl	800521c <_sbrk_r>
 8004ad0:	6030      	str	r0, [r6, #0]
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 fba1 	bl	800521c <_sbrk_r>
 8004ada:	1c43      	adds	r3, r0, #1
 8004adc:	d00a      	beq.n	8004af4 <sbrk_aligned+0x34>
 8004ade:	1cc4      	adds	r4, r0, #3
 8004ae0:	f024 0403 	bic.w	r4, r4, #3
 8004ae4:	42a0      	cmp	r0, r4
 8004ae6:	d007      	beq.n	8004af8 <sbrk_aligned+0x38>
 8004ae8:	1a21      	subs	r1, r4, r0
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 fb96 	bl	800521c <_sbrk_r>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d101      	bne.n	8004af8 <sbrk_aligned+0x38>
 8004af4:	f04f 34ff 	mov.w	r4, #4294967295
 8004af8:	4620      	mov	r0, r4
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	200002fc 	.word	0x200002fc

08004b00 <_malloc_r>:
 8004b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b04:	1ccd      	adds	r5, r1, #3
 8004b06:	f025 0503 	bic.w	r5, r5, #3
 8004b0a:	3508      	adds	r5, #8
 8004b0c:	2d0c      	cmp	r5, #12
 8004b0e:	bf38      	it	cc
 8004b10:	250c      	movcc	r5, #12
 8004b12:	2d00      	cmp	r5, #0
 8004b14:	4607      	mov	r7, r0
 8004b16:	db01      	blt.n	8004b1c <_malloc_r+0x1c>
 8004b18:	42a9      	cmp	r1, r5
 8004b1a:	d905      	bls.n	8004b28 <_malloc_r+0x28>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	2600      	movs	r6, #0
 8004b22:	4630      	mov	r0, r6
 8004b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bfc <_malloc_r+0xfc>
 8004b2c:	f000 f868 	bl	8004c00 <__malloc_lock>
 8004b30:	f8d8 3000 	ldr.w	r3, [r8]
 8004b34:	461c      	mov	r4, r3
 8004b36:	bb5c      	cbnz	r4, 8004b90 <_malloc_r+0x90>
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f7ff ffc0 	bl	8004ac0 <sbrk_aligned>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	4604      	mov	r4, r0
 8004b44:	d155      	bne.n	8004bf2 <_malloc_r+0xf2>
 8004b46:	f8d8 4000 	ldr.w	r4, [r8]
 8004b4a:	4626      	mov	r6, r4
 8004b4c:	2e00      	cmp	r6, #0
 8004b4e:	d145      	bne.n	8004bdc <_malloc_r+0xdc>
 8004b50:	2c00      	cmp	r4, #0
 8004b52:	d048      	beq.n	8004be6 <_malloc_r+0xe6>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	4631      	mov	r1, r6
 8004b58:	4638      	mov	r0, r7
 8004b5a:	eb04 0903 	add.w	r9, r4, r3
 8004b5e:	f000 fb5d 	bl	800521c <_sbrk_r>
 8004b62:	4581      	cmp	r9, r0
 8004b64:	d13f      	bne.n	8004be6 <_malloc_r+0xe6>
 8004b66:	6821      	ldr	r1, [r4, #0]
 8004b68:	1a6d      	subs	r5, r5, r1
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ffa7 	bl	8004ac0 <sbrk_aligned>
 8004b72:	3001      	adds	r0, #1
 8004b74:	d037      	beq.n	8004be6 <_malloc_r+0xe6>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	442b      	add	r3, r5
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d038      	beq.n	8004bf6 <_malloc_r+0xf6>
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	42a2      	cmp	r2, r4
 8004b88:	d12b      	bne.n	8004be2 <_malloc_r+0xe2>
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	e00f      	b.n	8004bb0 <_malloc_r+0xb0>
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	1b52      	subs	r2, r2, r5
 8004b94:	d41f      	bmi.n	8004bd6 <_malloc_r+0xd6>
 8004b96:	2a0b      	cmp	r2, #11
 8004b98:	d917      	bls.n	8004bca <_malloc_r+0xca>
 8004b9a:	1961      	adds	r1, r4, r5
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	6025      	str	r5, [r4, #0]
 8004ba0:	bf18      	it	ne
 8004ba2:	6059      	strne	r1, [r3, #4]
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	bf08      	it	eq
 8004ba8:	f8c8 1000 	streq.w	r1, [r8]
 8004bac:	5162      	str	r2, [r4, r5]
 8004bae:	604b      	str	r3, [r1, #4]
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	f104 060b 	add.w	r6, r4, #11
 8004bb6:	f000 f829 	bl	8004c0c <__malloc_unlock>
 8004bba:	f026 0607 	bic.w	r6, r6, #7
 8004bbe:	1d23      	adds	r3, r4, #4
 8004bc0:	1af2      	subs	r2, r6, r3
 8004bc2:	d0ae      	beq.n	8004b22 <_malloc_r+0x22>
 8004bc4:	1b9b      	subs	r3, r3, r6
 8004bc6:	50a3      	str	r3, [r4, r2]
 8004bc8:	e7ab      	b.n	8004b22 <_malloc_r+0x22>
 8004bca:	42a3      	cmp	r3, r4
 8004bcc:	6862      	ldr	r2, [r4, #4]
 8004bce:	d1dd      	bne.n	8004b8c <_malloc_r+0x8c>
 8004bd0:	f8c8 2000 	str.w	r2, [r8]
 8004bd4:	e7ec      	b.n	8004bb0 <_malloc_r+0xb0>
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	6864      	ldr	r4, [r4, #4]
 8004bda:	e7ac      	b.n	8004b36 <_malloc_r+0x36>
 8004bdc:	4634      	mov	r4, r6
 8004bde:	6876      	ldr	r6, [r6, #4]
 8004be0:	e7b4      	b.n	8004b4c <_malloc_r+0x4c>
 8004be2:	4613      	mov	r3, r2
 8004be4:	e7cc      	b.n	8004b80 <_malloc_r+0x80>
 8004be6:	230c      	movs	r3, #12
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	4638      	mov	r0, r7
 8004bec:	f000 f80e 	bl	8004c0c <__malloc_unlock>
 8004bf0:	e797      	b.n	8004b22 <_malloc_r+0x22>
 8004bf2:	6025      	str	r5, [r4, #0]
 8004bf4:	e7dc      	b.n	8004bb0 <_malloc_r+0xb0>
 8004bf6:	605b      	str	r3, [r3, #4]
 8004bf8:	deff      	udf	#255	; 0xff
 8004bfa:	bf00      	nop
 8004bfc:	200002f8 	.word	0x200002f8

08004c00 <__malloc_lock>:
 8004c00:	4801      	ldr	r0, [pc, #4]	; (8004c08 <__malloc_lock+0x8>)
 8004c02:	f7ff bf07 	b.w	8004a14 <__retarget_lock_acquire_recursive>
 8004c06:	bf00      	nop
 8004c08:	200002f4 	.word	0x200002f4

08004c0c <__malloc_unlock>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	; (8004c14 <__malloc_unlock+0x8>)
 8004c0e:	f7ff bf02 	b.w	8004a16 <__retarget_lock_release_recursive>
 8004c12:	bf00      	nop
 8004c14:	200002f4 	.word	0x200002f4

08004c18 <__ssputs_r>:
 8004c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	688e      	ldr	r6, [r1, #8]
 8004c1e:	461f      	mov	r7, r3
 8004c20:	42be      	cmp	r6, r7
 8004c22:	680b      	ldr	r3, [r1, #0]
 8004c24:	4682      	mov	sl, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	4690      	mov	r8, r2
 8004c2a:	d82c      	bhi.n	8004c86 <__ssputs_r+0x6e>
 8004c2c:	898a      	ldrh	r2, [r1, #12]
 8004c2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c32:	d026      	beq.n	8004c82 <__ssputs_r+0x6a>
 8004c34:	6965      	ldr	r5, [r4, #20]
 8004c36:	6909      	ldr	r1, [r1, #16]
 8004c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c3c:	eba3 0901 	sub.w	r9, r3, r1
 8004c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c44:	1c7b      	adds	r3, r7, #1
 8004c46:	444b      	add	r3, r9
 8004c48:	106d      	asrs	r5, r5, #1
 8004c4a:	429d      	cmp	r5, r3
 8004c4c:	bf38      	it	cc
 8004c4e:	461d      	movcc	r5, r3
 8004c50:	0553      	lsls	r3, r2, #21
 8004c52:	d527      	bpl.n	8004ca4 <__ssputs_r+0x8c>
 8004c54:	4629      	mov	r1, r5
 8004c56:	f7ff ff53 	bl	8004b00 <_malloc_r>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	b360      	cbz	r0, 8004cb8 <__ssputs_r+0xa0>
 8004c5e:	6921      	ldr	r1, [r4, #16]
 8004c60:	464a      	mov	r2, r9
 8004c62:	f000 faeb 	bl	800523c <memcpy>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	6126      	str	r6, [r4, #16]
 8004c74:	6165      	str	r5, [r4, #20]
 8004c76:	444e      	add	r6, r9
 8004c78:	eba5 0509 	sub.w	r5, r5, r9
 8004c7c:	6026      	str	r6, [r4, #0]
 8004c7e:	60a5      	str	r5, [r4, #8]
 8004c80:	463e      	mov	r6, r7
 8004c82:	42be      	cmp	r6, r7
 8004c84:	d900      	bls.n	8004c88 <__ssputs_r+0x70>
 8004c86:	463e      	mov	r6, r7
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	4632      	mov	r2, r6
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	f000 faab 	bl	80051e8 <memmove>
 8004c92:	68a3      	ldr	r3, [r4, #8]
 8004c94:	1b9b      	subs	r3, r3, r6
 8004c96:	60a3      	str	r3, [r4, #8]
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	4433      	add	r3, r6
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	f000 fad7 	bl	8005258 <_realloc_r>
 8004caa:	4606      	mov	r6, r0
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d1e0      	bne.n	8004c72 <__ssputs_r+0x5a>
 8004cb0:	6921      	ldr	r1, [r4, #16]
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	f7ff feb8 	bl	8004a28 <_free_r>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	f8ca 3000 	str.w	r3, [sl]
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	e7e9      	b.n	8004ca0 <__ssputs_r+0x88>

08004ccc <_svfiprintf_r>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	4698      	mov	r8, r3
 8004cd2:	898b      	ldrh	r3, [r1, #12]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	b09d      	sub	sp, #116	; 0x74
 8004cd8:	4607      	mov	r7, r0
 8004cda:	460d      	mov	r5, r1
 8004cdc:	4614      	mov	r4, r2
 8004cde:	d50e      	bpl.n	8004cfe <_svfiprintf_r+0x32>
 8004ce0:	690b      	ldr	r3, [r1, #16]
 8004ce2:	b963      	cbnz	r3, 8004cfe <_svfiprintf_r+0x32>
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	f7ff ff0b 	bl	8004b00 <_malloc_r>
 8004cea:	6028      	str	r0, [r5, #0]
 8004cec:	6128      	str	r0, [r5, #16]
 8004cee:	b920      	cbnz	r0, 8004cfa <_svfiprintf_r+0x2e>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e0d0      	b.n	8004e9c <_svfiprintf_r+0x1d0>
 8004cfa:	2340      	movs	r3, #64	; 0x40
 8004cfc:	616b      	str	r3, [r5, #20]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9309      	str	r3, [sp, #36]	; 0x24
 8004d02:	2320      	movs	r3, #32
 8004d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d0c:	2330      	movs	r3, #48	; 0x30
 8004d0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004eb4 <_svfiprintf_r+0x1e8>
 8004d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d16:	f04f 0901 	mov.w	r9, #1
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	469a      	mov	sl, r3
 8004d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d22:	b10a      	cbz	r2, 8004d28 <_svfiprintf_r+0x5c>
 8004d24:	2a25      	cmp	r2, #37	; 0x25
 8004d26:	d1f9      	bne.n	8004d1c <_svfiprintf_r+0x50>
 8004d28:	ebba 0b04 	subs.w	fp, sl, r4
 8004d2c:	d00b      	beq.n	8004d46 <_svfiprintf_r+0x7a>
 8004d2e:	465b      	mov	r3, fp
 8004d30:	4622      	mov	r2, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	4638      	mov	r0, r7
 8004d36:	f7ff ff6f 	bl	8004c18 <__ssputs_r>
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f000 80a9 	beq.w	8004e92 <_svfiprintf_r+0x1c6>
 8004d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d42:	445a      	add	r2, fp
 8004d44:	9209      	str	r2, [sp, #36]	; 0x24
 8004d46:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80a1 	beq.w	8004e92 <_svfiprintf_r+0x1c6>
 8004d50:	2300      	movs	r3, #0
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295
 8004d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d5a:	f10a 0a01 	add.w	sl, sl, #1
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	9307      	str	r3, [sp, #28]
 8004d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d66:	931a      	str	r3, [sp, #104]	; 0x68
 8004d68:	4654      	mov	r4, sl
 8004d6a:	2205      	movs	r2, #5
 8004d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d70:	4850      	ldr	r0, [pc, #320]	; (8004eb4 <_svfiprintf_r+0x1e8>)
 8004d72:	f7fb fa35 	bl	80001e0 <memchr>
 8004d76:	9a04      	ldr	r2, [sp, #16]
 8004d78:	b9d8      	cbnz	r0, 8004db2 <_svfiprintf_r+0xe6>
 8004d7a:	06d0      	lsls	r0, r2, #27
 8004d7c:	bf44      	itt	mi
 8004d7e:	2320      	movmi	r3, #32
 8004d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d84:	0711      	lsls	r1, r2, #28
 8004d86:	bf44      	itt	mi
 8004d88:	232b      	movmi	r3, #43	; 0x2b
 8004d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d92:	2b2a      	cmp	r3, #42	; 0x2a
 8004d94:	d015      	beq.n	8004dc2 <_svfiprintf_r+0xf6>
 8004d96:	9a07      	ldr	r2, [sp, #28]
 8004d98:	4654      	mov	r4, sl
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f04f 0c0a 	mov.w	ip, #10
 8004da0:	4621      	mov	r1, r4
 8004da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da6:	3b30      	subs	r3, #48	; 0x30
 8004da8:	2b09      	cmp	r3, #9
 8004daa:	d94d      	bls.n	8004e48 <_svfiprintf_r+0x17c>
 8004dac:	b1b0      	cbz	r0, 8004ddc <_svfiprintf_r+0x110>
 8004dae:	9207      	str	r2, [sp, #28]
 8004db0:	e014      	b.n	8004ddc <_svfiprintf_r+0x110>
 8004db2:	eba0 0308 	sub.w	r3, r0, r8
 8004db6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	46a2      	mov	sl, r4
 8004dc0:	e7d2      	b.n	8004d68 <_svfiprintf_r+0x9c>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	1d19      	adds	r1, r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	9103      	str	r1, [sp, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bfbb      	ittet	lt
 8004dce:	425b      	neglt	r3, r3
 8004dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd4:	9307      	strge	r3, [sp, #28]
 8004dd6:	9307      	strlt	r3, [sp, #28]
 8004dd8:	bfb8      	it	lt
 8004dda:	9204      	strlt	r2, [sp, #16]
 8004ddc:	7823      	ldrb	r3, [r4, #0]
 8004dde:	2b2e      	cmp	r3, #46	; 0x2e
 8004de0:	d10c      	bne.n	8004dfc <_svfiprintf_r+0x130>
 8004de2:	7863      	ldrb	r3, [r4, #1]
 8004de4:	2b2a      	cmp	r3, #42	; 0x2a
 8004de6:	d134      	bne.n	8004e52 <_svfiprintf_r+0x186>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	9203      	str	r2, [sp, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bfb8      	it	lt
 8004df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004df8:	3402      	adds	r4, #2
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ec4 <_svfiprintf_r+0x1f8>
 8004e00:	7821      	ldrb	r1, [r4, #0]
 8004e02:	2203      	movs	r2, #3
 8004e04:	4650      	mov	r0, sl
 8004e06:	f7fb f9eb 	bl	80001e0 <memchr>
 8004e0a:	b138      	cbz	r0, 8004e1c <_svfiprintf_r+0x150>
 8004e0c:	9b04      	ldr	r3, [sp, #16]
 8004e0e:	eba0 000a 	sub.w	r0, r0, sl
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	4082      	lsls	r2, r0
 8004e16:	4313      	orrs	r3, r2
 8004e18:	3401      	adds	r4, #1
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e20:	4825      	ldr	r0, [pc, #148]	; (8004eb8 <_svfiprintf_r+0x1ec>)
 8004e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e26:	2206      	movs	r2, #6
 8004e28:	f7fb f9da 	bl	80001e0 <memchr>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d038      	beq.n	8004ea2 <_svfiprintf_r+0x1d6>
 8004e30:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <_svfiprintf_r+0x1f0>)
 8004e32:	bb1b      	cbnz	r3, 8004e7c <_svfiprintf_r+0x1b0>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	3307      	adds	r3, #7
 8004e38:	f023 0307 	bic.w	r3, r3, #7
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	9303      	str	r3, [sp, #12]
 8004e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e42:	4433      	add	r3, r6
 8004e44:	9309      	str	r3, [sp, #36]	; 0x24
 8004e46:	e768      	b.n	8004d1a <_svfiprintf_r+0x4e>
 8004e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	2001      	movs	r0, #1
 8004e50:	e7a6      	b.n	8004da0 <_svfiprintf_r+0xd4>
 8004e52:	2300      	movs	r3, #0
 8004e54:	3401      	adds	r4, #1
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f04f 0c0a 	mov.w	ip, #10
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e64:	3a30      	subs	r2, #48	; 0x30
 8004e66:	2a09      	cmp	r2, #9
 8004e68:	d903      	bls.n	8004e72 <_svfiprintf_r+0x1a6>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0c6      	beq.n	8004dfc <_svfiprintf_r+0x130>
 8004e6e:	9105      	str	r1, [sp, #20]
 8004e70:	e7c4      	b.n	8004dfc <_svfiprintf_r+0x130>
 8004e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e76:	4604      	mov	r4, r0
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e7f0      	b.n	8004e5e <_svfiprintf_r+0x192>
 8004e7c:	ab03      	add	r3, sp, #12
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	462a      	mov	r2, r5
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <_svfiprintf_r+0x1f4>)
 8004e84:	a904      	add	r1, sp, #16
 8004e86:	4638      	mov	r0, r7
 8004e88:	f3af 8000 	nop.w
 8004e8c:	1c42      	adds	r2, r0, #1
 8004e8e:	4606      	mov	r6, r0
 8004e90:	d1d6      	bne.n	8004e40 <_svfiprintf_r+0x174>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	065b      	lsls	r3, r3, #25
 8004e96:	f53f af2d 	bmi.w	8004cf4 <_svfiprintf_r+0x28>
 8004e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e9c:	b01d      	add	sp, #116	; 0x74
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <_svfiprintf_r+0x1f4>)
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	4638      	mov	r0, r7
 8004eae:	f000 f879 	bl	8004fa4 <_printf_i>
 8004eb2:	e7eb      	b.n	8004e8c <_svfiprintf_r+0x1c0>
 8004eb4:	08005415 	.word	0x08005415
 8004eb8:	0800541f 	.word	0x0800541f
 8004ebc:	00000000 	.word	0x00000000
 8004ec0:	08004c19 	.word	0x08004c19
 8004ec4:	0800541b 	.word	0x0800541b

08004ec8 <_printf_common>:
 8004ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	4616      	mov	r6, r2
 8004ece:	4699      	mov	r9, r3
 8004ed0:	688a      	ldr	r2, [r1, #8]
 8004ed2:	690b      	ldr	r3, [r1, #16]
 8004ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	bfb8      	it	lt
 8004edc:	4613      	movlt	r3, r2
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	b10a      	cbz	r2, 8004eee <_printf_common+0x26>
 8004eea:	3301      	adds	r3, #1
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	0699      	lsls	r1, r3, #26
 8004ef2:	bf42      	ittt	mi
 8004ef4:	6833      	ldrmi	r3, [r6, #0]
 8004ef6:	3302      	addmi	r3, #2
 8004ef8:	6033      	strmi	r3, [r6, #0]
 8004efa:	6825      	ldr	r5, [r4, #0]
 8004efc:	f015 0506 	ands.w	r5, r5, #6
 8004f00:	d106      	bne.n	8004f10 <_printf_common+0x48>
 8004f02:	f104 0a19 	add.w	sl, r4, #25
 8004f06:	68e3      	ldr	r3, [r4, #12]
 8004f08:	6832      	ldr	r2, [r6, #0]
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	dc26      	bgt.n	8004f5e <_printf_common+0x96>
 8004f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f14:	1e13      	subs	r3, r2, #0
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	bf18      	it	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	0692      	lsls	r2, r2, #26
 8004f1e:	d42b      	bmi.n	8004f78 <_printf_common+0xb0>
 8004f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f24:	4649      	mov	r1, r9
 8004f26:	4638      	mov	r0, r7
 8004f28:	47c0      	blx	r8
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d01e      	beq.n	8004f6c <_printf_common+0xa4>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6922      	ldr	r2, [r4, #16]
 8004f32:	f003 0306 	and.w	r3, r3, #6
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	bf02      	ittt	eq
 8004f3a:	68e5      	ldreq	r5, [r4, #12]
 8004f3c:	6833      	ldreq	r3, [r6, #0]
 8004f3e:	1aed      	subeq	r5, r5, r3
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	bf0c      	ite	eq
 8004f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f48:	2500      	movne	r5, #0
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	bfc4      	itt	gt
 8004f4e:	1a9b      	subgt	r3, r3, r2
 8004f50:	18ed      	addgt	r5, r5, r3
 8004f52:	2600      	movs	r6, #0
 8004f54:	341a      	adds	r4, #26
 8004f56:	42b5      	cmp	r5, r6
 8004f58:	d11a      	bne.n	8004f90 <_printf_common+0xc8>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e008      	b.n	8004f70 <_printf_common+0xa8>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4652      	mov	r2, sl
 8004f62:	4649      	mov	r1, r9
 8004f64:	4638      	mov	r0, r7
 8004f66:	47c0      	blx	r8
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d103      	bne.n	8004f74 <_printf_common+0xac>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f74:	3501      	adds	r5, #1
 8004f76:	e7c6      	b.n	8004f06 <_printf_common+0x3e>
 8004f78:	18e1      	adds	r1, r4, r3
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	2030      	movs	r0, #48	; 0x30
 8004f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f82:	4422      	add	r2, r4
 8004f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	e7c7      	b.n	8004f20 <_printf_common+0x58>
 8004f90:	2301      	movs	r3, #1
 8004f92:	4622      	mov	r2, r4
 8004f94:	4649      	mov	r1, r9
 8004f96:	4638      	mov	r0, r7
 8004f98:	47c0      	blx	r8
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d0e6      	beq.n	8004f6c <_printf_common+0xa4>
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	e7d9      	b.n	8004f56 <_printf_common+0x8e>
	...

08004fa4 <_printf_i>:
 8004fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	7e0f      	ldrb	r7, [r1, #24]
 8004faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fac:	2f78      	cmp	r7, #120	; 0x78
 8004fae:	4691      	mov	r9, r2
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	469a      	mov	sl, r3
 8004fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fba:	d807      	bhi.n	8004fcc <_printf_i+0x28>
 8004fbc:	2f62      	cmp	r7, #98	; 0x62
 8004fbe:	d80a      	bhi.n	8004fd6 <_printf_i+0x32>
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	f000 80d4 	beq.w	800516e <_printf_i+0x1ca>
 8004fc6:	2f58      	cmp	r7, #88	; 0x58
 8004fc8:	f000 80c0 	beq.w	800514c <_printf_i+0x1a8>
 8004fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fd4:	e03a      	b.n	800504c <_printf_i+0xa8>
 8004fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fda:	2b15      	cmp	r3, #21
 8004fdc:	d8f6      	bhi.n	8004fcc <_printf_i+0x28>
 8004fde:	a101      	add	r1, pc, #4	; (adr r1, 8004fe4 <_printf_i+0x40>)
 8004fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08004fcd 	.word	0x08004fcd
 8004ff0:	08004fcd 	.word	0x08004fcd
 8004ff4:	08004fcd 	.word	0x08004fcd
 8004ff8:	08004fcd 	.word	0x08004fcd
 8004ffc:	08005051 	.word	0x08005051
 8005000:	08004fcd 	.word	0x08004fcd
 8005004:	08004fcd 	.word	0x08004fcd
 8005008:	08004fcd 	.word	0x08004fcd
 800500c:	08004fcd 	.word	0x08004fcd
 8005010:	08005155 	.word	0x08005155
 8005014:	0800507d 	.word	0x0800507d
 8005018:	0800510f 	.word	0x0800510f
 800501c:	08004fcd 	.word	0x08004fcd
 8005020:	08004fcd 	.word	0x08004fcd
 8005024:	08005177 	.word	0x08005177
 8005028:	08004fcd 	.word	0x08004fcd
 800502c:	0800507d 	.word	0x0800507d
 8005030:	08004fcd 	.word	0x08004fcd
 8005034:	08004fcd 	.word	0x08004fcd
 8005038:	08005117 	.word	0x08005117
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	602a      	str	r2, [r5, #0]
 8005044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800504c:	2301      	movs	r3, #1
 800504e:	e09f      	b.n	8005190 <_printf_i+0x1ec>
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	682b      	ldr	r3, [r5, #0]
 8005054:	0607      	lsls	r7, r0, #24
 8005056:	f103 0104 	add.w	r1, r3, #4
 800505a:	6029      	str	r1, [r5, #0]
 800505c:	d501      	bpl.n	8005062 <_printf_i+0xbe>
 800505e:	681e      	ldr	r6, [r3, #0]
 8005060:	e003      	b.n	800506a <_printf_i+0xc6>
 8005062:	0646      	lsls	r6, r0, #25
 8005064:	d5fb      	bpl.n	800505e <_printf_i+0xba>
 8005066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800506a:	2e00      	cmp	r6, #0
 800506c:	da03      	bge.n	8005076 <_printf_i+0xd2>
 800506e:	232d      	movs	r3, #45	; 0x2d
 8005070:	4276      	negs	r6, r6
 8005072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005076:	485a      	ldr	r0, [pc, #360]	; (80051e0 <_printf_i+0x23c>)
 8005078:	230a      	movs	r3, #10
 800507a:	e012      	b.n	80050a2 <_printf_i+0xfe>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	6029      	str	r1, [r5, #0]
 8005084:	0605      	lsls	r5, r0, #24
 8005086:	d501      	bpl.n	800508c <_printf_i+0xe8>
 8005088:	681e      	ldr	r6, [r3, #0]
 800508a:	e002      	b.n	8005092 <_printf_i+0xee>
 800508c:	0641      	lsls	r1, r0, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0xe4>
 8005090:	881e      	ldrh	r6, [r3, #0]
 8005092:	4853      	ldr	r0, [pc, #332]	; (80051e0 <_printf_i+0x23c>)
 8005094:	2f6f      	cmp	r7, #111	; 0x6f
 8005096:	bf0c      	ite	eq
 8005098:	2308      	moveq	r3, #8
 800509a:	230a      	movne	r3, #10
 800509c:	2100      	movs	r1, #0
 800509e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050a2:	6865      	ldr	r5, [r4, #4]
 80050a4:	60a5      	str	r5, [r4, #8]
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	bfa2      	ittt	ge
 80050aa:	6821      	ldrge	r1, [r4, #0]
 80050ac:	f021 0104 	bicge.w	r1, r1, #4
 80050b0:	6021      	strge	r1, [r4, #0]
 80050b2:	b90e      	cbnz	r6, 80050b8 <_printf_i+0x114>
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	d04b      	beq.n	8005150 <_printf_i+0x1ac>
 80050b8:	4615      	mov	r5, r2
 80050ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80050be:	fb03 6711 	mls	r7, r3, r1, r6
 80050c2:	5dc7      	ldrb	r7, [r0, r7]
 80050c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050c8:	4637      	mov	r7, r6
 80050ca:	42bb      	cmp	r3, r7
 80050cc:	460e      	mov	r6, r1
 80050ce:	d9f4      	bls.n	80050ba <_printf_i+0x116>
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d10b      	bne.n	80050ec <_printf_i+0x148>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	07de      	lsls	r6, r3, #31
 80050d8:	d508      	bpl.n	80050ec <_printf_i+0x148>
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	6861      	ldr	r1, [r4, #4]
 80050de:	4299      	cmp	r1, r3
 80050e0:	bfde      	ittt	le
 80050e2:	2330      	movle	r3, #48	; 0x30
 80050e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ec:	1b52      	subs	r2, r2, r5
 80050ee:	6122      	str	r2, [r4, #16]
 80050f0:	f8cd a000 	str.w	sl, [sp]
 80050f4:	464b      	mov	r3, r9
 80050f6:	aa03      	add	r2, sp, #12
 80050f8:	4621      	mov	r1, r4
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff fee4 	bl	8004ec8 <_printf_common>
 8005100:	3001      	adds	r0, #1
 8005102:	d14a      	bne.n	800519a <_printf_i+0x1f6>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	b004      	add	sp, #16
 800510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	4833      	ldr	r0, [pc, #204]	; (80051e4 <_printf_i+0x240>)
 8005118:	2778      	movs	r7, #120	; 0x78
 800511a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	6829      	ldr	r1, [r5, #0]
 8005122:	061f      	lsls	r7, r3, #24
 8005124:	f851 6b04 	ldr.w	r6, [r1], #4
 8005128:	d402      	bmi.n	8005130 <_printf_i+0x18c>
 800512a:	065f      	lsls	r7, r3, #25
 800512c:	bf48      	it	mi
 800512e:	b2b6      	uxthmi	r6, r6
 8005130:	07df      	lsls	r7, r3, #31
 8005132:	bf48      	it	mi
 8005134:	f043 0320 	orrmi.w	r3, r3, #32
 8005138:	6029      	str	r1, [r5, #0]
 800513a:	bf48      	it	mi
 800513c:	6023      	strmi	r3, [r4, #0]
 800513e:	b91e      	cbnz	r6, 8005148 <_printf_i+0x1a4>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	f023 0320 	bic.w	r3, r3, #32
 8005146:	6023      	str	r3, [r4, #0]
 8005148:	2310      	movs	r3, #16
 800514a:	e7a7      	b.n	800509c <_printf_i+0xf8>
 800514c:	4824      	ldr	r0, [pc, #144]	; (80051e0 <_printf_i+0x23c>)
 800514e:	e7e4      	b.n	800511a <_printf_i+0x176>
 8005150:	4615      	mov	r5, r2
 8005152:	e7bd      	b.n	80050d0 <_printf_i+0x12c>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	6826      	ldr	r6, [r4, #0]
 8005158:	6961      	ldr	r1, [r4, #20]
 800515a:	1d18      	adds	r0, r3, #4
 800515c:	6028      	str	r0, [r5, #0]
 800515e:	0635      	lsls	r5, r6, #24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	d501      	bpl.n	8005168 <_printf_i+0x1c4>
 8005164:	6019      	str	r1, [r3, #0]
 8005166:	e002      	b.n	800516e <_printf_i+0x1ca>
 8005168:	0670      	lsls	r0, r6, #25
 800516a:	d5fb      	bpl.n	8005164 <_printf_i+0x1c0>
 800516c:	8019      	strh	r1, [r3, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	4615      	mov	r5, r2
 8005174:	e7bc      	b.n	80050f0 <_printf_i+0x14c>
 8005176:	682b      	ldr	r3, [r5, #0]
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	602a      	str	r2, [r5, #0]
 800517c:	681d      	ldr	r5, [r3, #0]
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	2100      	movs	r1, #0
 8005182:	4628      	mov	r0, r5
 8005184:	f7fb f82c 	bl	80001e0 <memchr>
 8005188:	b108      	cbz	r0, 800518e <_printf_i+0x1ea>
 800518a:	1b40      	subs	r0, r0, r5
 800518c:	6060      	str	r0, [r4, #4]
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	2300      	movs	r3, #0
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005198:	e7aa      	b.n	80050f0 <_printf_i+0x14c>
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	462a      	mov	r2, r5
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	47d0      	blx	sl
 80051a4:	3001      	adds	r0, #1
 80051a6:	d0ad      	beq.n	8005104 <_printf_i+0x160>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	d413      	bmi.n	80051d6 <_printf_i+0x232>
 80051ae:	68e0      	ldr	r0, [r4, #12]
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	4298      	cmp	r0, r3
 80051b4:	bfb8      	it	lt
 80051b6:	4618      	movlt	r0, r3
 80051b8:	e7a6      	b.n	8005108 <_printf_i+0x164>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4632      	mov	r2, r6
 80051be:	4649      	mov	r1, r9
 80051c0:	4640      	mov	r0, r8
 80051c2:	47d0      	blx	sl
 80051c4:	3001      	adds	r0, #1
 80051c6:	d09d      	beq.n	8005104 <_printf_i+0x160>
 80051c8:	3501      	adds	r5, #1
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	9903      	ldr	r1, [sp, #12]
 80051ce:	1a5b      	subs	r3, r3, r1
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dcf2      	bgt.n	80051ba <_printf_i+0x216>
 80051d4:	e7eb      	b.n	80051ae <_printf_i+0x20a>
 80051d6:	2500      	movs	r5, #0
 80051d8:	f104 0619 	add.w	r6, r4, #25
 80051dc:	e7f5      	b.n	80051ca <_printf_i+0x226>
 80051de:	bf00      	nop
 80051e0:	08005426 	.word	0x08005426
 80051e4:	08005437 	.word	0x08005437

080051e8 <memmove>:
 80051e8:	4288      	cmp	r0, r1
 80051ea:	b510      	push	{r4, lr}
 80051ec:	eb01 0402 	add.w	r4, r1, r2
 80051f0:	d902      	bls.n	80051f8 <memmove+0x10>
 80051f2:	4284      	cmp	r4, r0
 80051f4:	4623      	mov	r3, r4
 80051f6:	d807      	bhi.n	8005208 <memmove+0x20>
 80051f8:	1e43      	subs	r3, r0, #1
 80051fa:	42a1      	cmp	r1, r4
 80051fc:	d008      	beq.n	8005210 <memmove+0x28>
 80051fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005206:	e7f8      	b.n	80051fa <memmove+0x12>
 8005208:	4402      	add	r2, r0
 800520a:	4601      	mov	r1, r0
 800520c:	428a      	cmp	r2, r1
 800520e:	d100      	bne.n	8005212 <memmove+0x2a>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800521a:	e7f7      	b.n	800520c <memmove+0x24>

0800521c <_sbrk_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d06      	ldr	r5, [pc, #24]	; (8005238 <_sbrk_r+0x1c>)
 8005220:	2300      	movs	r3, #0
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7fc f8ea 	bl	8001400 <_sbrk>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_sbrk_r+0x1a>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_sbrk_r+0x1a>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	200002f0 	.word	0x200002f0

0800523c <memcpy>:
 800523c:	440a      	add	r2, r1
 800523e:	4291      	cmp	r1, r2
 8005240:	f100 33ff 	add.w	r3, r0, #4294967295
 8005244:	d100      	bne.n	8005248 <memcpy+0xc>
 8005246:	4770      	bx	lr
 8005248:	b510      	push	{r4, lr}
 800524a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800524e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005252:	4291      	cmp	r1, r2
 8005254:	d1f9      	bne.n	800524a <memcpy+0xe>
 8005256:	bd10      	pop	{r4, pc}

08005258 <_realloc_r>:
 8005258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525c:	4680      	mov	r8, r0
 800525e:	4614      	mov	r4, r2
 8005260:	460e      	mov	r6, r1
 8005262:	b921      	cbnz	r1, 800526e <_realloc_r+0x16>
 8005264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005268:	4611      	mov	r1, r2
 800526a:	f7ff bc49 	b.w	8004b00 <_malloc_r>
 800526e:	b92a      	cbnz	r2, 800527c <_realloc_r+0x24>
 8005270:	f7ff fbda 	bl	8004a28 <_free_r>
 8005274:	4625      	mov	r5, r4
 8005276:	4628      	mov	r0, r5
 8005278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527c:	f000 f81b 	bl	80052b6 <_malloc_usable_size_r>
 8005280:	4284      	cmp	r4, r0
 8005282:	4607      	mov	r7, r0
 8005284:	d802      	bhi.n	800528c <_realloc_r+0x34>
 8005286:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800528a:	d812      	bhi.n	80052b2 <_realloc_r+0x5a>
 800528c:	4621      	mov	r1, r4
 800528e:	4640      	mov	r0, r8
 8005290:	f7ff fc36 	bl	8004b00 <_malloc_r>
 8005294:	4605      	mov	r5, r0
 8005296:	2800      	cmp	r0, #0
 8005298:	d0ed      	beq.n	8005276 <_realloc_r+0x1e>
 800529a:	42bc      	cmp	r4, r7
 800529c:	4622      	mov	r2, r4
 800529e:	4631      	mov	r1, r6
 80052a0:	bf28      	it	cs
 80052a2:	463a      	movcs	r2, r7
 80052a4:	f7ff ffca 	bl	800523c <memcpy>
 80052a8:	4631      	mov	r1, r6
 80052aa:	4640      	mov	r0, r8
 80052ac:	f7ff fbbc 	bl	8004a28 <_free_r>
 80052b0:	e7e1      	b.n	8005276 <_realloc_r+0x1e>
 80052b2:	4635      	mov	r5, r6
 80052b4:	e7df      	b.n	8005276 <_realloc_r+0x1e>

080052b6 <_malloc_usable_size_r>:
 80052b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ba:	1f18      	subs	r0, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bfbc      	itt	lt
 80052c0:	580b      	ldrlt	r3, [r1, r0]
 80052c2:	18c0      	addlt	r0, r0, r3
 80052c4:	4770      	bx	lr
	...

080052c8 <_init>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr

080052d4 <_fini>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr
